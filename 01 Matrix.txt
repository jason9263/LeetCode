public class Solution {
    public int[][] updateMatrix(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        
        Queue<int[]> dp = new LinkedList<int[]>();
        
        for(int i = 0 ; i < m; i ++){
            for(int j = 0; j < n; j++){
                if(matrix[i][j] == 0){
                    dp.add(new int[]{i,j});
                }else{
                    matrix[i][j] = Integer.MAX_VALUE;
                }
            }
        }
        
        int[][] dir = {{-1,0} , {0,1}, {1,0},{0,-1}};
        
        while(!dp.isEmpty()){
            
            int[] cell = dp.poll();
            
            for(int[] tmpdir:dir){
                
                int r = cell[0] + tmpdir[0];
                
                int c = cell[1] + tmpdir[1];
                
                if(r < 0 || r >= m || c < 0 || c >= n || matrix[r][c] <= matrix[cell[0]][cell[1]] + 1){
                    continue;
                }
                
                dp.add(new int[]{r,c});
                matrix[r][c] = matrix[cell[0]][cell[1]]+1;         
            }
        }        
        return matrix;
    }
}