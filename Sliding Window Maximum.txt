public class Solution {
    
    public int[] maxSlidingWindow(int[] nums, int k) {
   if(nums.length == 0)
        return nums;
    int[] res = new int[nums.length - k + 1];
    TreeMap<Integer, Set<Integer>> memo = new TreeMap<>();
    for(int i = 0 ; i < k ; i++){
        if(memo.containsKey(nums[i])){
            memo.get(nums[i]).add(i);
        }else{
            Set<Integer> temp = new HashSet<>();
            temp.add(i);
            memo.put(nums[i], temp);
        }
    }
    res[0] = memo.lastKey();
    for(int i = k ; i < nums.length ; i++){
        if(memo.get(nums[i - k]).size() == 1){
            memo.remove(nums[i - k]);
        }else{
            memo.get(nums[i - k]).remove(i - k);
        }
        if(memo.containsKey(nums[i]))
            memo.get(nums[i]).add(i);
        else{
            Set<Integer> temp = new HashSet<>();
            temp.add(i);
            memo.put(nums[i], temp);
        }
        res[i - k + 1] = memo.lastKey();
    }
    return res;
        
    }
}





    public class Solution {
    
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums == null || k <= 0){
            return new int[0];
        }
        
        int n = nums.length;
        int[] r = new int[n-k+1];
        
        int ri = 0;
        
        Deque<Integer> q = new ArrayDeque<>();
        
        for(int i = 0; i <  nums.length;i++){
            
            while(!q.isEmpty()  && q.peek() < i - k + 1){
                q.poll();
            }
            
            while(!q.isEmpty() && nums[q.peekLast()] < nums[i]){
                q.pollLast();
            }
            
            q.offer(i);
            
            if(i >= k-1){
                r[ri++] = nums[q.peek()];
            }
            
        }
        
        return r;
        
    }
}