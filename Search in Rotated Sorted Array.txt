public class Solution {
    public int search(int[] nums, int target) {
        
        int left =0;
        int right = nums.length -1;
        
        //Finding the minimum
        if(nums[left] > nums[right]){
            while(left != right -1){
                int mid = left +(right - left)/2;
                if(nums[mid] < nums[left] ){
                    right = mid;
                }else{
                    left = mid;
                }
            }
            
            int minindex = nums[left] < nums[right] ? left:right;
            
            if(target < nums[minindex] || target > nums[minindex-1]){
                return -1;
            }else if(target <= nums[minindex-1] && target >= nums[0] ){
                left = 0;
                right = minindex-1;
            }else if(target >= nums[minindex] && target <= nums[nums.length-1]){
                left = minindex;
                right = nums.length-1;
            }
        }
        
        
        //binary search
        
        while(left < right){
            int mid = left +(right - left)/2;
            
            if(target >  nums[mid]){
                left = mid+1;
            }else if(target < nums[mid]){
                right = mid-1;
            }else if(target == nums[mid]){
                return mid;
            }
        }
        
        return nums[left] == target ? left : -1;

        
    }
}




public class Solution {
public int search(int[] A, int target) {
    int lo = 0;
    int hi = A.length - 1;
    while (lo < hi) {
        int mid = (lo + hi) / 2;
        if (A[mid] == target) return mid;
        
        if (A[lo] <= A[mid]) {
            if (target >= A[lo] && target < A[mid]) {
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        } else {
            if (target > A[mid] && target <= A[hi]) {
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
    }
    return A[lo] == target ? lo : -1;
}



class Solution {
    public int search(int[] nums, int target) {
        if(nums == null || nums.length == 0){
            return -1;
        }
        
        
        int lo= 0;
        int hi = nums.length-1;
        
        while(lo < hi){
            
            int mid = lo + (hi-lo)/2;
            
            if(nums[mid] == target){
                return mid;
            }
            
            if(nums[lo] <= nums[mid]){
                if(nums[lo] <= target  && target < nums[mid] ){
                    hi = mid-1;
                }else{
                    lo = mid + 1;
                }
            } else{
                if(nums[mid] < target && target <= nums[hi]){
                    lo = mid + 1;
                }else{
                    hi = mid -1;
                }    
            }
            
        }
        
        return nums[lo] == target ? lo : -1;
        
    }
}