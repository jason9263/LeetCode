/*
Given an array of unsorted consecutive positive integers from 1..N, 
1) Take one integer out, find the missing integer. 
size N-1






*/



import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public int[] k_missing_numbers(int[] nums, int N, int k){
    // extra K memory to do this
    // O(N) time complexity ;
    // arr = num + [-inf, -inf, ]
     
    // nums + k (N+1,.... N +k) //
    //sort N time 
    
  }
  
  public int[] two_missing_numbers(int[] nums, int N){
  //1 - N 
  // NlogN  or bucket sorting method O(N)
    
    Arrays.sort(nums);
    int len = nums.length;
    
    int tmp = 1;
    
    int[] res = new int[2];
    int index = 0;
    /// 1 2 4 5 7  N = 7
    
    
    for(int i = 0; i < len; i++){
      if(nums[i] != tmp){
        
        res[index++]  = tmp;
        
        tmp += 1;
        
        if(index >= 2){
          break;
        }
        
      }else{
        
          tmp++;
        
      }
    }
    
    return res;
    
  }
  
  
  
  public int[] two_missing_numbers(int[] nums, int N){
    Set<Integer> set = new Hashset<Integer>();
    for(int i = 1; i <= N; i++){
      set.add(i);
    }
    
    for(int tmp : nums){
      set.remove(tmp);
      
    }
    
    
    int[] res = new int[2];
    int i = 0;
    
    for(int tmp : set){
        res[i++] = tmp;
      }
    
    return res;
  }
    
  public int missing_number(int[] nums, int N){
   
    long sum = N*(N+1)/2;
    long cursum = 0;
    
    for(int tmp : nums){
      cursum += tmp;  
    }
    
    
    return (int)(sum - cursum);
    
    
  }

    
    
    public static void main(String[] args) {
    ArrayList<String> strings = new ArrayList<String>();
    strings.add("Hello, World!");
    strings.add("Welcome to CoderPad.");
    strings.add("This pad is running Java 8.");

    for (String string : strings) {
      System.out.println(string);
    }
  }
}
