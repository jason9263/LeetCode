public class Solution {
    public int ladderLength(String beginWord, String endWord, Set<String> wordList) {
        //bfs
        
        Queue<String> jq = new LinkedList<String>();
        jq.add(beginWord);
        jq.add(null);
        
        Set<String> visited = new HashSet<String>();
        visited.add(beginWord);
        
        int level = 1;
        
        while(!jq.isEmpty()){
            String str = jq.poll();
            
            if(str != null){
                
                for(int i = 0; i < str.length(); i++){
                    
                    char[] chars = str.toCharArray();
                    
                    for(char c = 'a' ; c <= 'z'; c++){
                        chars[i] = c;
                        
                        String word = new String(chars);
                        
                        if(word.equals(endWord)){
                            return level + 1;
                        }
                        
                        if(wordList.contains(word) && !visited.contains(word)){
                            jq.add(word);
                            visited.add(word);
                        }
                        
                    }
                }
                
            }else{
                level++;
                
                if(!jq.isEmpty()){
                    jq.add(null);
                }
                
            }

        }
        
        return 0;
    
    }
}




class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {


        if(!wordList.contains(endWord)){
            return 0;
        }


        Set<String> beginSet = new HashSet<String>();
        Set<String> endSet = new HashSet<String>();
        
        int len = 1;
        int strLen = beginWord.length();
        
        HashSet<String> visited = new HashSet<String>();
        
        beginSet.add(beginWord);
        endSet.add(endWord);
        
        while(!beginSet.isEmpty() && !endSet.isEmpty()){
            
            if(beginSet.size() > endSet.size()){
                Set<String> set = beginSet;
                beginSet = endSet;
                endSet = set;
            }
            
            Set<String> temp = new HashSet<String>();
            
            for(String word : beginSet){
                char[] chs = word.toCharArray();
                
                for(int i = 0; i < chs.length; i++){
                    for(char c = 'a' ; c <= 'z'; c++){
                        char old = chs[i];
                        chs[i] = c;
                        
                        String target = String.valueOf(chs);
                        
                        if(endSet.contains(target)){
                            return len+1;
                        }
                        
                        if(!visited.contains(target) && wordList.contains(target)){
                            temp.add(target);
                            visited.add(target);
                        }
                        
                        chs[i] = old;
                    }
                }
            }
            
            beginSet = temp;
            len++;
        }
        
        return 0;
    }
}






class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if(!wordList.contains(endWord)) 
            return 0;
        Set<String> beginSet = new HashSet<>();
        Set<String> endSet = new HashSet<>();
        Set<String> dic = new HashSet<>(wordList);
        
        beginSet.add(beginWord);
        endSet.add(endWord);
        
        int step = 1;
        
        Set<String> visited = new HashSet<>();
        
        while(!beginSet.isEmpty() &&!endSet.isEmpty()) {
        
            if(beginSet.size() > endSet.size()) {
                Set<String> tmp = beginSet;
                beginSet = endSet;
                endSet = tmp;
            }
            
            Set<String> tmp = new HashSet<>();
            
            for(String str : beginSet) {
            
                for(int i = 0; i < str.length(); i++) {
                
                    char[] chars = str.toCharArray();    
                    
                    for(char a = 'a'; a <= 'z'; a++) {
                    
                        chars[i] = a;
                        
                        String newV = String.valueOf(chars);
                        
                        if(endSet.contains(newV)) 
                            return step+1;
                        
                        if(dic.contains(newV) && visited.add(newV)) {
                            dic.remove(newV);
                            tmp.add(newV);
                        }
                    }
                }
            }
            
            step++;
            beginSet = tmp;
        }
        return 0;
    }
}