/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(!head || !head->next){
            return head;
        }
        
        
        ListNode * slow = getmid(head);
        ListNode * fast = slow->next;
        
        slow->next = NULL;
        
        slow = sortList(head);
        fast = sortList(fast);
        
        return merge(slow,fast);
    }
    
    ListNode* getmid(ListNode * head){
        ListNode *slow = head ;
        ListNode * fast = head;
        
        while(fast->next && fast->next->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        
        return slow;
    }
    
    
    
    
    ListNode* merge(ListNode * head1, ListNode  *head2){
        ListNode * res = new ListNode(INT_MIN);
        ListNode * cur = res;

        
        while(head1 && head2){
            if(head1 ->val < head2->val){
                cur->next = head1;
                head1= head1->next;
                
            }else{
                cur->next = head2;
                head2 = head2->next;
            }
            
            cur = cur->next;
        }
        
        
        if(head1){
            cur->next = head1;
        }
        
        if(head2 ){
            cur->next = head2;
        }
        
        return res->next;    
    }
    
    
    
    
    
};