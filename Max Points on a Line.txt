/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */
public class Solution {
    public int maxPoints(Point[] points) {
        if(points == null || points.length == 0){
            return 0;
        }
        
        if(points.length == 1){
            return 1;
        }
        
        int result = 0;
        
        HashMap<Integer,Map<Integer,Integer>> jmap = new HashMap<Integer,Map<Integer,Integer>>();
        
        for(int i = 0; i < points.length; i++){
            jmap.clear();
            int overlap = 0;
            int max = 0;
            
            for(int j = i+1; j < points.length; j++){
                
                int x = points[j].x - points[i].x;
                int y = points[j].y - points[i].y;
                
                if(x == 0 && y == 0){
                    overlap++;
                    continue;
                }
                
                int gcd = gcd(x,y);
                
                if(gcd != 0){
                    x = x/gcd;
                    y = y/gcd;
                }
                
                if(jmap.containsKey(x)){
                    if(jmap.get(x).containsKey(y)){
                        jmap.get(x).put(y,jmap.get(x).get(y)+1);
                    }else{
                        jmap.get(x).put(y,1);
                    }
                }else{
                    Map<Integer,Integer> m = new HashMap<Integer,Integer>();
                    m.put(y,1);
                    jmap.put(x,m);
                }
                max = Math.max(max,jmap.get(x).get(y));
            }
             result = Math.max(result, max + overlap + 1);
            
        
        }
            return result;
            
    }
    
    
    public int gcd(int a ,int b){
        if(b == 0){
            return a;
        }else{
            return gcd(b,a%b);
        }
    }
}