public class WordDictionary {

    class TrieNode{
        TrieNode[] next = new TrieNode[27];
        String word ;
        boolean t = false;
    }
    
    public TrieNode root ;
    
    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new TrieNode();    
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        
        TrieNode tmpr = root;
        
        for(char c : word.toCharArray()){
                int tmp = c-'a';
                
                if(tmpr.next[tmp] == null){
                    tmpr.next[tmp] = new TrieNode();
                }
                
                tmpr = tmpr.next[tmp];
                
                tmpr.t = tmpr.t | false;
  
        }
        
        tmpr.word = word;
        tmpr.t = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return helper(word.toCharArray(), 0, root);
    }
    
    public boolean helper(char[] chs, int k, TrieNode node){
        if(k == chs.length){
            return node.t;
        }
        
        if(chs[k] != '.'){
            return node.next[chs[k] -'a'] != null && helper(chs,k+1,node.next[chs[k] -'a']);
        }else{
            for(int i = 0; i < node.next.length; i++){
                if(node.next[i] != null){
                    if(helper(chs,k+1,node.next[i])){
                        return true;
                    }
                }
            }        
        }
        return false;
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */