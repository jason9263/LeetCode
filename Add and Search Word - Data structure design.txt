class WordDictionary {
    class TrieNode{
        TrieNode[] child = new TrieNode[26];
        String words = "";
        boolean isword = false;
    }
    
    public TrieNode root ;
    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode node = root;
        
        for(int i = 0; i < word.length(); i++){
            char c = word.charAt(i);
            
            if(node.child[c-'a'] == null){
                node.child[c-'a'] = new TrieNode();
            }
            
            node = node.child[c-'a'];
        }
        
        node.isword = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return bfs(word.toCharArray(), 0 , root);
    }
    
    public boolean bfs(char[] word, int start, TrieNode node){

        if(start == word.length){
        
            return node.isword;
        
        }
        
        if(word[start] != '.'){
            return node.child[word[start]-'a'] != null && bfs(word,start+1,node.child[word[start]-'a']);
        }else{
            
            for(int i = 0; i < node.child.length;  i++){
                
                if(node.child[i] != null){
                    if(bfs(word,start+1,node.child[i])){
                        return true;
                    } 
                }
            }
            
            return false;
        }   
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */