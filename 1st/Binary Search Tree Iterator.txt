/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
private : 
    vector<int> bstvector;
    int index;
    
public:
    BSTIterator(TreeNode *root) {
        
        BSTIterator:: treetolist(root,this->bstvector);
        this->index = 0;
        
    }
    
    static void treetolist(TreeNode *root, vector<int> &bstvector){
        
        if(!root ){
            return;
        }
        
        if(root->left){
            treetolist(root->left,bstvector);
        }
        
        bstvector.push_back(root->val);
        
        if(root->right){
            treetolist(root->right,bstvector);
        }
        
        
    }



    /** @return whether we have a next smallest number */
    bool hasNext() {
        return index < this->bstvector.size();
    }

    /** @return the next smallest number */
    int next() {
        return bstvector[index++];
    }
};

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */