/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
     
        int ca = 0;
        int cb = 0;
        ListNode * cruA = headA;
        ListNode * cruB = headB;
        
        while(cruA  != NULL){
            ca++;
            cruA = cruA->next;
        }
     
     
        while(cruB != NULL){
            cb++;
            cruB = cruB->next;
        }
        
        
        int diff = 0;
        if(ca >= cb){
            diff = ca- cb;
            int i = 0;
            while(i< diff){
                headA = headA->next;
                i++;
            }
            
            while(headA != NULL){
                if(headA ->val != headB->val){
                    headA = headA->next;
                    headB = headB->next;
                }else{
                    return headA;
                }
            }
            
            return NULL;
            
            
        }else{
            diff = cb - ca;
            int i = 0;
            while(i < diff){
                headB = headB ->next;
                i++;
            }
            
            while(headB != NULL){
                if(headA -> val != headB ->val){
                    headA = headA->next;
                    headB = headB ->next;
                }else{
                    return headA;
                }
            }
            
            
            return NULL;
            
        }
        
        
        
        
        
        
        
        
    }
};