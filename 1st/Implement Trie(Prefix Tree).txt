class TrieNode {
public:
    // Initialize your data structure here.
            bool iskey;
        TrieNode *children[26];
    
    TrieNode() {

         
        iskey = false;
         for(int i = 0 ; i < 26; i++){
            children[i] = NULL;   
          }
        

    }
};

class Trie {
public:
    Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    void insert(string word) {
        TrieNode * node = root;
        
        for(int i = 0 ; i < word.length() ; i++){
            if(node->children[word[i] - 'a'] == NULL){
                node->children[word[i] - 'a'] = new TrieNode();
            }
            node = node->children[word[i] - 'a'];
        }
        
        node->iskey = true;
    }

    // Returns if the word is in the trie.
    bool search(string word) {
        TrieNode * node = root;
        
        for(int i = 0 ; i < word.length(); i++){
            if(node != NULL){
                node = node->children[word[i]- 'a'];
            }else{
                break;
            }
        }
        
        if(node == NULL){
            return false;
        }else{
            return node->iskey;
        }
        
        
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    bool startsWith(string prefix) {
        TrieNode *node = root;
        for(int i = 0 ; i < prefix.length(); i++){
            if(node != NULL){
                node = node->children[prefix[i] - 'a'];
            }else{
                break;
            }
        }
        
    if(node == NULL){
        return false;
    }else{
        return true;
    }
        
        
    }

private:
    TrieNode* root;
};

// Your Trie object will be instantiated and called as such:
// Trie trie;
// trie.insert("somestring");
// trie.search("key");