
public class Solution {
    public int minCostII(int[][] costs) {
        if(costs == null || costs.length == 0 || costs[0].length == 0){
            return 0;
        }
        
        int m = costs.length;
        int n =  costs[0].length;
        
        int[][] dp = new int[m][n];
        
        int res = Integer.MAX_VALUE;
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        
        for(int i = 0; i < n; i++){
            dp[0][i] = costs[0][i];
        }
        
        if(m == 1){
            for(int tmp : costs[0]){
                res = Math.min(res, tmp);
            }
            return res;
        }
        
        for(int i = 1; i < m; i++){
            
            for(int j = 0; j < n; j++){
                
                for(int k = 0; k <n; k++){
                    if(k != j){
                         dp[i][j] = Math.min(dp[i][j]  , dp[i-1][k] + costs[i][j]);
                       
                    }
                }
                
                if(i == m-1){
                  
                    res = Math.min(res,dp[i][j]);  
                }
            }

        }
        
        return res;
        
    }
}