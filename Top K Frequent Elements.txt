public class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        
        List<Integer>[] bucket = new List[nums.length+1];
        
        Map<Integer,Integer> frequencyMap = new HashMap<Integer,Integer>();
        
        for(int n : nums){
            frequencyMap.put(n, frequencyMap.getOrDefault(n,0)+1);
        }
        
        for(int key:frequencyMap.keySet()){
            
            int frequency = frequencyMap.get(key);
            
            if(bucket[frequency] == null){
                bucket[frequency] = new ArrayList<>();
            }
        
            bucket[frequency].add(key);
        }
    
        List<Integer> res = new ArrayList<>();
        
        for(int pos = bucket.length - 1; pos >= 0 && res.size() < k ; pos--){
            if(bucket[pos] != null){
                res.addAll(bucket[pos]);
            }
        }
    
        return res;
        
        }
}


class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        List<String>  result = new ArrayList<String>();
        
        HashMap<String,Integer> hm = new HashMap<String,Integer>();
        
        for(String tmp:words){
            if(hm.containsKey(tmp)){
                hm.put(tmp,hm.get(tmp) + 1);
            }else{
                hm.put(tmp,1);
            }
        }
        
        PriorityQueue<Map.Entry<String,Integer>> pq = new PriorityQueue<>((a,b)-> a.getValue() == b.getValue() ? b.getKey().compareTo(a.getKey()) : a.getValue() - b.getValue());
        
        for(Map.Entry<String,Integer> entry:hm.entrySet()){
            
            pq.offer(entry);
            
            if(pq.size() > k){
            
                pq.poll();
            }
        }
        
        while(!pq.isEmpty()){
            result.add(0,pq.poll().getKey());
        }
        
        return result;
    }
}