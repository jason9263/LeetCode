/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        
      
        
        
        if(inorder == null || postorder == null || inorder.length != postorder.length){
            return null;
        }
        
        
        HashMap<Integer, Integer> jmap = new HashMap<Integer, Integer>();
        for(int i = 0; i < inorder.length ; i++){
            jmap.put(inorder[i],i);
        }
        
     
        
        TreeNode root = helper(inorder,0,inorder.length-1,postorder,0,postorder.length-1,jmap);
        
        return root;
        
        
    }
    
    public TreeNode helper(int[] inorder, int is, int ie, int[] postorder, int ps, int pe ,HashMap<Integer, Integer> jmap){
        if(ps > pe || is > ie){
            return null;
        }
        
        TreeNode res = new TreeNode(postorder[pe]);
        
        int rootindex = jmap.get(postorder[pe]);
        
        TreeNode left = helper(inorder,is,rootindex-1, postorder, ps, ps + rootindex - is -1,jmap);
        TreeNode right = helper(inorder,rootindex+1, ie, postorder, ps + rootindex - is, pe-1, jmap);
        res.left = left;
        res.right = right;
        return res;
        
    }
    
    
}