/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void reorderList(ListNode head) {
        //corner case
        if(head == null || head.next == null){
            return ;
        }
        
        //find the pre half and post half
        //pre for the last element of the previous link
        //slow the head of the second list
        
        ListNode fast = head;
        ListNode slow = head;
        ListNode pre = null;
        ListNode l1 = head;
        
        while(fast != null && fast.next != null){
            pre = slow;
            slow = slow.next;
            fast = fast.next.next;
            
        }
        pre.next = null;
        
        
        //reverse the last part
        ListNode l2 = reverse(slow);
        
        
        //merge two list
        
        merge(l1,l2);
        
    }
    
    public ListNode reverse(ListNode head){
      
        
        ListNode cur = head;
        ListNode pre = null;
        ListNode next = null;
        
        while(cur != null){
            next = cur.next;
            cur.next = pre;
            
            pre = cur;
            cur = next;
        }
        
        head.next  = null;
        
        return pre;
        
    }
    
    
    public void merge(ListNode l1, ListNode l2){
        
        
        while(l1 != null){
            ListNode n1 = l1.next;
            ListNode n2 = l2.next;
            
            l1.next = l2;
            
            if(n1 == null){
                break;
            }
            
            l2.next = n1;
            
            l1 = n1;
            l2 = n2;
        }
        

        
    }
    
    
    
    
}