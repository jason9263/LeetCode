class Solution {
public:
    vector<vector<int> > threeSum(vector<int> &num) {
        vector<vector<int> > result;
        if(num.size() < 3)
            return result;
            
        sort(num.begin(), num.end());
        const int target = 0;
        
    
        int last_index = num.size() - 2;
        
        for(int i = 0; i < last_index; i++)
        {
            int left = i + 1;
            
            int right = num.size() - 1;
            
            if((i != 0)&&(num[i-1] == num[i]))
            
             {   
                 continue;
                 
             }
                
                
                
            while(left < right)
            {
                if((num[i] + num[left] + num[right]) < target)
                   { 
                       left++;
                   }
                else if((num[i] + num[left] + num[right]) > target)
                    {
                        right--;
                    }
                else{
                    if((left != (i+1))&&(num[left-1] == num[left])){
                        ++left;
                        continue;
                    }    
                    if((right != (num.size()-1))&&(num[right] == num[right+1])){ //去重
                        --right;
                        continue;
                    }    
                    result.push_back({num[i], num[left], num[right]});
                    ++left;
                    --right;
                }
            }
        }
        
        return result;
    }
};