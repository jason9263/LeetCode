/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private Map<TreeNode, Integer> tmap = new HashMap<TreeNode, Integer>();
    
    public int diameterOfBinaryTree(TreeNode root) {
        if(root == null){
            return 0;
        }
        
        int res = maxDepth(root.left) + maxDepth(root.right);
        
        return Math.max(res, Math.max(diameterOfBinaryTree(root.left), diameterOfBinaryTree(root.right)));
        
    }
    
    public int maxDepth(TreeNode root){
        if(root == null){
            return 0;
        }
        
        if(tmap.containsKey(root)){
            return tmap.get(root);
        }    
        
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        
        int res = Math.max(left, right)+1;
        tmap.put(root,res);
        
        return res;
    }
    
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int max = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        maxDepth(root);
        return max;
    }
    
    public int maxDepth(TreeNode root){
        if(root == null){
            return 0;
        }
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        
        max = Math.max(max, left + right);
        
        return Math.max(left, right)+1;
    }
    
}