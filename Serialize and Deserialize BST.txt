/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    private static final String spliter = ",";
    private static final String NN = "X";
    
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        buildString(root, sb);
        return sb.toString();
    }
    
    private void buildString(TreeNode node, StringBuilder sb){
        
        if(node == null){
            sb.append(NN).append(spliter);
        }else{
            sb.append(node.val).append(spliter);
            buildString(node.left,sb);
            buildString(node.right,sb);
        }
        
    }
    

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        Deque<String> nodes = new LinkedList<String>();
        nodes.addAll(Arrays.asList(data.split(spliter)));
        return buildTree(nodes);
    }
    
    private TreeNode buildTree(Deque<String> nodes){
        String val = nodes.remove();
        if(val.equals(NN)){
            return null;
        }else{
            TreeNode node = new TreeNode(Integer.valueOf(val));
            node.left = buildTree(nodes);
            node.right = buildTree(nodes);
            return node;
        }
        
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
// 
// 
// 
// 
// /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String spliter = ",";
    public String NN = "#";
    
    public String serialize(TreeNode root) {
            StringBuilder sb = new StringBuilder();
        helper(root,sb);
        return sb.toString();
    }
    
    public void helper(TreeNode root, StringBuilder sb){
        if(root == null){
            sb.append(NN).append(spliter);
        }else{
            sb.append(root.val).append(spliter);
            
            helper(root.left,sb);
            helper(root.right,sb);
        }
    }
    
    

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        Deque<String> list = new LinkedList<String>();
        
        list.addAll(Arrays.asList(data.split(",")));
        
        return build(list);
    }
    
    private TreeNode build(Deque<String> list){
        String val = list.remove();
        
        if(val.equals(NN)){
            return null;
        }else{
            TreeNode node = new TreeNode(Integer.valueOf(val));
            
            node.left = build(list);
            node.right = build(list);
            
            return node;
        }
        
        
    }
    
    
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));