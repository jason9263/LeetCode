public class Solution {
    public List<List<String>> solveNQueens(int n) {
        char[][] board = new char[n][n];
        List<List<String>> res = new ArrayList<List<String>>();
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                board[i][j] = '.';
            }
        }
        
        
        dfs(board,0,res);
        
        return res;
    }
    
    public void dfs(char[][] board, int colindex, List<List<String>> res){
        if(colindex == board.length){
            res.add(construct(board));
            return;
        }
        
        for(int i = 0 ; i < board.length; i++){
            if(validate(board,i, colindex)){
                board[i][colindex] = 'Q';
                dfs(board,colindex+1,res);
                board[i][colindex] = '.';
            }
        }
        
    }
    
    public boolean validate(char[][] board,int x , int y){
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < y; j++){
                if(board[i][j] == 'Q' && ( x == i || x+y == i + j || x +j == y + i)){
                    return false;
                }
            }
        }
        
        return true;

    }
    
    public List<String> construct(char[][] board){
        List<String> res = new LinkedList<String>();
        
        for(int i = 0; i < board.length;i++){
            String s = new String(board[i]);
            res.add(s);
        }
        
        return res;
    }

    
}