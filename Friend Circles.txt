

public class Solution {
    public int findCircleNum(int[][] M) {
        int len = M.length;
        int cnt = 0;
        int[] visited = new int[len];
        
        for(int i = 0; i < len; i++){
            if(visited[i] == 0){
                dfs(M, i,visited);
                cnt++;
            }
        }
        
        return cnt;
    }
    
    public void dfs(int[][] M, int i, int[] visited){
        int len = M.length;
        for(int j = 0; j < len; j++){
            if(M[i][j] == 1 && visited[j] == 0){
                visited[j] = 1;
                dfs(M,j,visited);
            }
        }
    }
    
}



class Solution {
    public int len ;
    public int cnt;
        
    public int findCircleNum(int[][] M) {
       len = M.length;
       cnt = 0;
        
        int[] visited = new int[len];
        
        for(int i = 0; i < len; i++){
            if(visited[i] == 0){
                dfs(M, i, visited);
                cnt++;
            }
        }
        
        return cnt;
    }
    
    public void dfs(int[][] M , int i , int[] visited){
       for(int j = 0; j < len; j++){
           if(visited[j] == 0 && M[i][j] == 1){
               visited[j] = 1;
               
               dfs(M, j , visited);
           }
       }
    }
        
}