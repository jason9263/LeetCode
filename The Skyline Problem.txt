public class Solution {
    public List<int[]> getSkyline(int[][] buildings) {
        List<int[]> result = new ArrayList<>();
        List<int[]> height = new ArrayList<>();
        
        for(int[] b: buildings){
            height.add(new int[] {b[0], -b[2]});
            height.add(new int[]{b[1], b[2]});
        }
        
        Collections.sort(height,(a,b) ->{
            
            if(a[0] != b[0]){
                return a[0]- b[0];
            }
            
            return a[1] - b[1];
        });
        
        Queue<Integer> pq = new PriorityQueue<>((a,b) -> (b-a));
        
        pq.offer(0);
        
        int prev = 0;
        
        for(int[] h : height){
            if(h[1] < 0){
                pq.offer(-h[1]);
            }else{
                pq.remove(h[1]);
            }

        int cur = pq.peek();
            
        if(prev != cur){
            result.add(new int[]{h[0],cur});
            prev = cur;
        }        
        }
        return result;
    }
}



class Solution {
    public List<int[]> getSkyline(int[][] buildings) {
        List<int[]> res = new LinkedList<>();
        List<int[]> height = new LinkedList<>();
        
        for(int[] h : buildings){
            height.add(new int[] {h[0], -h[2]});
            height.add(new int[]{h[1], h[2]});
        }
        
        Collections.sort(height, (a,b)->{
            if(a[0] != b[0]){
                return a[0] - b[0];
            }
            return a[1] - b[1];
        });
        
        
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a,b)->(b-a));
        
        pq.offer(0);
        
        int prev = 0;
        
        for(int[] h : height){
            if(h[1] < 0){
                pq.offer(-h[1]);
            }else{
                pq.remove(h[1]);
            }
            
            int cur = pq.peek();
            
            if(prev != cur){
                res.add(new int[] {h[0], cur});
                prev = cur;
            }
            
        }
        return res;
        
    }
}



class Solution {
    public List<int[]> getSkyline(int[][] buildings) {
        List<int[]> res = new ArrayList<int[]>();
        
        List<int[]> height = new ArrayList<int[]>();
        
        for(int[] b : buildings){
            height.add(new int[]{b[0], -b[2]});
            height.add(new int[] {b[1], b[2]});
        }
        
        Collections.sort(height,   (a,b) -> {
            if(a[0] == b[0]){
                return a[1] - b[1];
            }
            
            return a[0] - b[0];
        });
        
        
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a,b)-> b - a);
        
        
        pq.add(0);
        int pre = 0;
        
        for(int[] t : height){
            if(t[1] < 0){
                pq.add(-t[1]);
            }else{
                pq.remove(t[1]);
            }
            
            int cur = pq.peek();
            
            if(cur != pre){
                res.add(new int[]{ t[0], cur});
                pre = cur;
            }
            
            
        }
        
        return res;
        
        
    }
}