/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        //corner case
        if(root == null){
            return res;
        }
        
        
        //general case
        
        HashMap<Integer,ArrayList<Integer>> jm = new HashMap<Integer,ArrayList<Integer>>();
        Queue<TreeNode> jq = new LinkedList<TreeNode>();
        
        
        HashMap<TreeNode, Integer> weight = new HashMap<TreeNode ,Integer>();
        
        jq.offer(root);
        weight.put(root,0);
        
        int min = 0;
        
        
        while(!jq.isEmpty()){
            
            TreeNode node = jq.poll();
            int w = weight.get(node);
            
            if(!jm.containsKey(w)){
                jm.put(w,new ArrayList<>());
            }
            
            jm.get(w).add(node.val);
            
            if(node.left != null){
                jq.add(node.left);
                weight.put(node.left,w-1);
            }
            
            if(node.right != null){
                jq.add(node.right);
                weight.put(node.right,w+1);
            }
            
            min = Math.min(min,w);
            
        }
        
        
        while(jm.containsKey(min)){
            res.add(jm.get(min++));
        }
        
        return res;
        
        
        
    }
}