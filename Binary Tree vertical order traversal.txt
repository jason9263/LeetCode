/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        
        TreeMap<Integer,List<Integer>> tmap = new TreeMap<Integer, List<Integer>>();
        
        Queue<TreeNode> qt = new LinkedList<TreeNode>();
        Queue<Integer> qv = new LinkedList<Integer>();
        
        List<List<Integer>> res  = new ArrayList<>();
        
        if(root == null){
            return res;
        }
        
        int min = 0;
        int max = 0;
        
        qt.offer(root);
        qv.offer(0);

        while(!qt.isEmpty()){
            TreeNode t = qt.poll();
            int val = qv.poll();
            
            if(!tmap.containsKey(val)){
                tmap.put(val,new LinkedList<Integer>());
            }
            
            tmap.get(val).add(t.val);
                        
            if(t.left != null){
                qt.offer(t.left);
                qv.offer(val-1);
                min = Math.min(min, val -1);

            }
            
            if(t.right != null){
                qt.offer(t.right);
                qv.offer(val+1);
                max = Math.max(max, val + 1);
            }
        }
                
        for(int i = min; i <= max; i++){
            res.add(tmap.get(i));
        }
        
        return res;
        
    }
}