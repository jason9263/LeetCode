/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
        if(s == null){
            return false;
        }
        
        if(isSame(s,t)){
            return true;
        }
        
        return isSubtree(s.left ,t) || isSubtree(s.right,t);
    }
    
    public boolean isSame(TreeNode s, TreeNode t){
        if(s == null && t == null){
            return true;
        }
        
        if(s == null || t == null){
            return false;
        }
        
        if(s.val != t.val){
            return false;
        }
        
        return isSame(s.left,t.left) && isSame(s.right,t.right);
    }
    
}





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
        String ss = "";
        String st = "";
        
        ss = serize(s,ss);
        st = serize(t,st);
        
        return ss.contains(st);
        
    }
    
    public String serize(TreeNode node, String s){
        if(node == null){
            s += ",#";
            return s;
        }
        
        s += "," + node.val;
        
        s = serize(node.left,s);
        s = serize(node.right,s);
        
        return s;
    }
    
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
        StringBuilder sbs = new StringBuilder();
        StringBuilder sbt = new StringBuilder();
        
        helper(s,sbs);
        helper(t,sbt);
        return sbs.toString().contains(sbt.toString());
    }
    
    public void helper(TreeNode node, StringBuilder sb){
        if(node == null){
            sb.append(",#");
            return ;
        }
        
        sb.append("," + node.val);
        
        
        helper(node.left,sb);
        helper(node.right,sb);
        
        
    }
    
    
}