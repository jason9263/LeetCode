public class Solution {
    public void wiggleSort(int[] nums) {
        if(nums == null || nums.length == 0){
            return ;
        }
        
        Arrays.sort(nums);
        
        for(int i = 2; i < nums.length; i = i+2){
            
            int tmp = nums[i];
            nums[i] = nums[i-1];
            nums[i-1] = tmp;
            
        }
        
    }
}





class Solution {
    public void wiggleSort(int[] nums) {
        if(nums == null || nums.length <= 1){
            return ;
        }
        
        Arrays.sort(nums);

        for(int i = 1; i < nums.length-1; i = i + 2){
            swap(nums, i, i+1);
        }
        
    }
    
    public void swap(int[] nums, int i , int j){
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
    
}




class Solution {
    public void wiggleSort(int[] nums) {
        
        int len = nums.length;
        
        int ptr1 = (len+ 1)/2;
        int ptr2 = len;
        int[] tmp = new int[len];
        
        tmp = Arrays.copyOf(nums, nums.length);
        
        Arrays.sort(tmp);
        
        for(int i = 0; i < len; i++){
            nums[i] = (( i&1) == 0) ? tmp[--ptr1] : tmp[--ptr2];
        }
        
    }
}