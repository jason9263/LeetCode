class Solution {
public:
    int maximumGap(vector<int>& nums) {
        if(nums.size() < 2){
            return 0;
        }
        
        int n = nums.size();
        int minN = nums[0];
        int maxN = nums[0];
        
        for(int i = 1; i < n; i++){
            maxN = max(nums[i],maxN);
            minN = min(nums[i], minN);
        }
        
        int len = (maxN - minN)/n + 1;
        int bucketNum = (maxN - minN)/len +1;
        
        vector<int> bucketMin(bucketNum, INT_MAX);
        vector<int> bucketMax(bucketNum, INT_MIN);
        
        for(int i = 0; i < n; i++){
            int Idx = (nums[i] - minN)/len;
            bucketMin[Idx] = min(bucketMin[Idx],nums[i]);
            bucketMax[Idx] = max(bucketMax[Idx],nums[i]);
        }
        
        int res = 0;
        int pre = 0;
        
        
        for(int i = 1; i < bucketNum; i++){
            
            if(bucketMin[i] == INT_MAX || bucketMax[i] == INT_MIN){
                continue;
            }
            
            res = max(res,bucketMin[i] - bucketMax[pre]);
            
            pre = i;
            
            
        }
        
        return res;
        
        
    }
};