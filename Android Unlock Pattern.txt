public class Solution {
    public int numberOfPatterns(int m, int n) {
        int res = 0;
        
        boolean[] visited =new boolean[10];
        int[][] jumps = new int[10][10];
        
        init(visited,jumps);
        
        
        res += helper(1,0,1,visited,jumps,m,n)*4;
        res += helper(1,0,2,visited,jumps,m,n)*4;
        res += helper(1,0,5,visited,jumps,m,n);
        
        
        return res;
    }
    
    public int helper(int lenpath, int res, int start,boolean[] visited, int[][] jumps,int m, int n ){
        
        if(lenpath >= m){
            res++;
        }
        
        lenpath++;
        
        
        if(lenpath > n){
            return res;
        }
        
        visited[start] = true;
        
        for(int next = 1; next <= 9; next++){
            int jump = jumps[start][next];
            
            if(!visited[next] && (visited[jump] || jump == 0)){
                res = helper(lenpath,res,next,visited,jumps,m,n);
            }
            
        }
        
        
        visited[start] = false;
        
        return res;
        
    }
    
    
    public void init(boolean[] visited, int[][] jumps ){
        
        for(boolean t : visited){
            t = false;
        }
        

 
        
        jumps[1][3] = jumps[3][1] = 2;
        jumps[4][6] = jumps[6][4] = 5;
        jumps[7][9] = jumps[9][7] = 8;
        jumps[1][7] = jumps[7][1] = 4;
        jumps[2][8] = jumps[8][2] = 5;
        jumps[3][9] = jumps[9][3] = 6;
        jumps[1][9] = jumps[9][1] = jumps[3][7] = jumps[7][3] = 5;
        
        
    }
    
    
    
}