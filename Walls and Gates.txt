class Solution {
    
    public int m ;
    public int n ;
    
    public int[][] dirs = new int[][]{{1,0} , {-1,0} ,{0,1} ,{0,-1} };
    
    public void wallsAndGates(int[][] rooms) {
        if(rooms == null || rooms.length == 0){
            return ;
        }

        m = rooms.length;
        n = rooms[0].length;
    
        for(int i = 0; i < m ; i++){
            for(int j = 0; j < n ; j++){
                if(rooms[i][j] == 0){

                    dfs(rooms, i,j, 0);
                }
            }
        }
    }
    
    public void dfs(int[][] rooms , int i , int j , int val){
        
        if(i < 0 || i >= m || j < 0 || j >= n || rooms[i][j] == -1 ||  rooms[i][j] < val){
            return;
        }
        
        rooms[i][j] = val;
        
        //System.out.println(rooms[i][j]);
        
        for(int[] dir : dirs){
            
            int newi = i + dir[0];
            int newj = j + dir[1];
            
            dfs(rooms, newi, newj , val+1);
        }
    }

}