public class Solution {
    public int minDistance(String word1, String word2) {
        
        if(word1 == null || word1.length() == 0){
            return word2.length();
        }
        
        if(word2 ==  null || word2.length() == 0){
            return word1.length();
        }

        int comlen = helper(word1,word2);
        
        int res1 = Math.abs(word1.length() - comlen);
        int res2 = Math.abs(word2.length() - comlen);
        
        return res1+ res2;
        
    }
    
    //find the longest common substring
    
    
    public int helper(String s1, String s2){
        int[][] com = new int[s1.length() +1 ][s2.length()+1];
        int m = s1.length();
        int n = s2.length();
        
        for(int i = 0; i <=m ; i++){
            com[i][0] = 0;
        }
        
        for(int j = 0; j <= n; j++){
            com[0][j] = 0;
            
        }
        
        for(int i = 1; i <=m; i++){
            for(int j = 1; j <= n; j++){
                
                if(s1.charAt(i-1) == s2.charAt(j-1)){
                    com[i][j] = com[i-1][j-1]+1;
                }else{
                    com[i][j] = Math.max(com[i-1][j],com[i][j-1]);
                }
                
                
            }
        }
        
        return com[m][n];
    }
    
}