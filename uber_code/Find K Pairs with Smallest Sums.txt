public class Solution {
    public List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        List<int[]> res = new ArrayList<int[]>();
        TreeMap<Long,List<int[]>> tm= new TreeMap<Long,List<int[]>>();
        
        
        int m = Math.min(nums1.length,k);
        int n = Math.min(nums2.length,k);
        long tmpsum = 0;
        
        for(int i = 0 ; i < m; i++){
            for(int j = 0; j < n; j++){
                tmpsum = nums1[i] + nums2[j];
                int[] pos = {nums1[i] ,nums2[j]};
                if(tm.containsKey(tmpsum)){
                    
                    tm.get(tmpsum).add(pos);;
                }else{
                   List<int[]> tmpres = new ArrayList<int[]>();
                    tmpres.add(pos);
                    tm.put(tmpsum,tmpres);
                }
            }
        }
        
        int index = 0;
            for(Map.Entry<Long,List<int[]>> tmp : tm.entrySet()){
                List<int[]> tmpres = tmp.getValue();
                
                for(int j = 0; j < tmpres.size(); j++){
                    
                    if(index < k){
                        res.add(tmpres.get(j));
                        index++;
                    }else{
                        return res;
                    }

                }
            }
        return res;
    }
}


class Solution {
    public List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        
        PriorityQueue<int[]> p = new PriorityQueue<>((a,b) -> a[0] + a[1] - b[0] - b[1]);
        
        List<int[]> res = new ArrayList<>();
        
        if(nums1.length == 0 || nums2.length == 0 || k <= 0){
            return res;
            
        }
        
        for(int i = 0; i < nums1.length && i < k ; i++){
            p.offer(new int[] {nums1[i], nums2[0], 0});
        }
        
        
        while(k-- > 0 && !p.isEmpty() ){
            
            int[] cur = p.poll();
            
            res.add(new int[]{cur[0], cur[1]});
            
            if(cur[2] == nums2.length-1){
                continue;
            }
            
            p.offer(new int[] { cur[0], nums2[cur[2] + 1], cur[2] + 1 });
        
        }
        
        return res;
    }
}