public class Solution {
    public List<Integer> countSmaller(int[] nums) {
        Integer[] ans = new Integer[nums.length];
        List<Integer> sorted = new ArrayList<Integer>();
        
        for(int i = nums.length - 1; i >= 0; i-- ){
            int index = findIndex(sorted, nums[i]);
            ans[i] = index;
            sorted.add(index,nums[i]);
        }
        return Arrays.asList(ans);  
    }
    
    private int findIndex(List<Integer> sorted, int target){
        if(sorted.size() == 0){
            return 0;
        }
        
        int start = 0;
        int end = sorted.size() -1 ;
        
        if(sorted.get(end ) < target){
            return end + 1;
        }
        
        if(sorted.get(start) >= target){
            return 0;
        }
        
        while(start + 1 < end){
            int mid = start + (end - start)/2;
            if(sorted.get(mid) < target){
                start = mid + 1;
            }else{
                end = mid;
            }
        }
           
        if(sorted.get(start) >= target){
            return start;
        }
        
        return end;
        
    }    
}



class Solution {
    public List<Integer> countSmaller(int[] nums) {
        int len = nums.length;
        
        Integer[] res = new Integer[len];

        int target = 0;
        int index = 0;
        List<Integer> sorted = new ArrayList<>();

        for(int i = len-1; i >= 0; i--){
            target = nums[i];    
            
            index = helper(sorted,target);
            res[i] = index;
            
            sorted.add(index,target);
        }
        return Arrays.asList(res);  
    }
    
    private int helper(List<Integer> sorted, int target){
        
        if(sorted.size() == 0){
            return 0;
        }
        
        int lo = 0;
        int hi = sorted.size()-1;
        
        if(sorted.get(hi) < target){
            return hi+1;
        }
        
        if(sorted.get(lo) >= target){
            return 0;
        }
            
        //find the pos
        while(lo  < hi){
            int mid = lo +(hi - lo)/2;
            if(sorted.get(mid) < target){
                lo = mid + 1;
            }else {
                hi = mid;
            }
        }
        
        if(sorted.get(lo) >= target){
            return lo;
        }
        
        return lo+1;
    }
    
}