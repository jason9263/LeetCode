class Solution {
    public String simplifyPath(String path) {
        Deque<String> stack = new LinkedList<>();
        
        Set<String> skip = new HashSet<>(Arrays.asList(".","..",""));
        
        for(String tmp : path.split("/")){
            if(tmp.equals("..") && !stack.isEmpty()){
                stack.pop();
            }else if(!skip.contains(tmp)){
                    stack.push(tmp);
                }
        }
        
        String res = "";
        
        for(String dir: stack){
            res = "/" + dir + res;
        }
        
        return res.isEmpty()? "/" : res;
        
    }
}



class Solution {
    public String simplifyPath(String path) {
        
        
       // Deque<String> stack = new LinkedList<String>();
        Stack<String> stack = new Stack<String>();
        
        Set<String> set = new HashSet<String>();
        set.add("..");
        set.add(".");
        set.add("");
        
        String[] words = path.split("/");
        
        for(String tmp : words){
            if(tmp.equals("..") && !stack.isEmpty()){
                stack.pop();
            }else if(!set.contains(tmp)){
                stack.push(tmp);
            }
        }
        
        String res = "";
        
        System.out.println(stack.peek());
        
        for(String tmp : stack){
            
            System.out.println(tmp);
            
            res = res + "/" + tmp;
        }
        
        return res.isEmpty() ? "/" : res;
        
    }
}