public class Solution {
    public int maxProfit(int k, int[] prices) {
        if(prices == null || prices.length == 0 || k == 0){
            return 0;
        }
        
        if(prices.length <= k){
            return helper(k,prices);
        }
        
        int len = prices.length;
        
        int[] g = new int[k+1];
        int[] l = new int[k+1];
        
        for(int i = 0; i < prices.length - 1; i++){
            int diff = prices[i+1] - prices[i];
            
            //for(int j >= k; j >= 1; j--){
            for (int j = k; j >= 1; j--) {
                l[j] = Math.max(g[j-1] + Math.max(0,diff), l[j] + diff);
                g[j] = Math.max(g[j], l[j]);
            }
            
        }
        
        return g[k];

    }
    
    
    public int helper(int k , int[] prices){
        int res = 0;
        for(int i = 0; i< prices.length-1; i++){
            res = res + Math.max(0, prices[i+1] - prices[i]);
        }
        
        
        return res;
    }
    
    
}