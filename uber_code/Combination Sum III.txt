class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        int[] nums = new int[9];
        for(int i = 0; i < 9; i++){
            nums[i] = i+1;
        }
        
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> out = new ArrayList<>();
        
        backtrack(res,out,nums,n,k,0);
        
        return res;
    }
    
    public void backtrack(List<List<Integer>> res, List<Integer> out, int[] nums, int remain, int k , int start){
        if(out.size() > k){
            return;
        }
        
        if(out.size() == k && remain != 0){
            return;
        }
        
        if(out.size() == k && remain == 0){
            res.add(new ArrayList<Integer>(out));
        }
        
        for(int i = start; i < nums.length; i++){
            
            out.add(nums[i]);
            
            backtrack(res,out,nums,remain - nums[i], k, i+1);
            
            out.remove(out.size()-1);
            
        }
        
        
        
        
    }
    
}