/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int cnt = 0;
    public int res = Integer.MIN_VALUE;
    
    public int kthSmallest(TreeNode root, int k) {
        helper(root,k);
        
        return res;
    }
    
    public void helper(TreeNode root,int k){
        if(root == null){
            return;
        }
        
        helper(root.left, k);
        cnt++;
        
        if(cnt == k){
            res = root.val;
        }
        
        helper(root.right, k);
    }
}





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    public Stack<TreeNode> stack;
    public int res = Integer.MIN_VALUE;
    public int cnt = 0;
    public int kthSmallest(TreeNode root, int k) {
        stack = new Stack<TreeNode>();
        TreeNode p = root;
        
        while(!stack.isEmpty() || p != null){
            if( p != null){
                stack.push(p);
                p = p.left;
            }else{
                TreeNode node = stack.pop();
                if(++cnt == k){
                    return node.val;
                }
                p = node.right;
            }
        }
         return res;   
    }
}