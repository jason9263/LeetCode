public class Solution {
    class Point implements Comparable<Point>{
        int x;
        int y;
        int l;
        String s;
        public Point(int x, int y){
            this.x = x;
            this.y = y;
            this.l = Integer.MAX_VALUE;
            this.s = "";
        }
        public Point(int x,int y, int l, String s){
            this.x = x;
            this.y = y;
            this.l = l;
            this.s = s;
        }
        
        public int compareTo(Point p ){
            return l == p.l ? s.compareTo(p.s) : l - p.l;
        }
        
    }
    
        
    private int m;
    private int n;
    public String findShortestWay(int[][] maze, int[] ball, int[] hole) {
    

        
        m = maze.length;
        n = maze[0].length;
        Point[][] points = new Point[m][n];
        
        for(int i = 0; i < m*n ; i++){
            points[i/n][i%n] = new Point(i/n, i%n, Integer.MAX_VALUE,"");
        }

        
        PriorityQueue<Point> list = new PriorityQueue<>();
        
        list.offer(new Point(ball[0], ball[1] ,0,""));
        
        //int[][] dir = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        //String[] dirs = new String[]{"u","d","r","l"};
        
        
        int[][] dir=new int[][] {{-1,0},{0,1},{1,0},{0,-1}};
        String[] ds=new String[] {"u","r","d","l"};
        
        while(!list.isEmpty()){
           
              Point p=list.poll();
            if(points[p.x][p.y].compareTo(p) <= 0){
                continue;
            }
            
            points[p.x][p.y] = p;
            
            for(int i = 0; i< 4; i++){
                
                int[] tmpd = dir[i];
                            
                int r = p.x;
                int c = p.y;
                int l = p.l;

                while( r >= 0 && r < m &&  c >= 0 && c < n && maze[r][c] == 0 && ( r != hole[0] || c != hole[1]) ){
                    r += tmpd[0];
                    c += tmpd[1];
                    l++;            
                }
                
                if(r!= hole[0] || c!= hole[1]){
                    r -= tmpd[0];
                    c -= tmpd[1];
                    l--;
                }
                
                list.offer(new Point(r,c,l,p.s + ds[i]));    
            }    
        }
        
        return points[hole[0]][hole[1]].l == Integer.MAX_VALUE ? "impossible" :points[hole[0]][hole[1]].s;
    }
    

}