public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        int[] nums = {1,2,3,4,5,6,7,8,9};
        List<Integer> out = new ArrayList<Integer>();
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        
        helper(nums,n, 0, out,res,k);
        
        
        return res;
    }
    
    public void helper(int[] nums, int target, int start, List<Integer> out, List<List<Integer>> res, int k ){
        
        if(target < 0 || (out.size() >= k && target != 0)){
            return ;
        }
        else if(out.size() == k && target == 0){
            
            System.out.println(out.size());
            res.add(new ArrayList<Integer>(out));
            return;
        }else{
        
        for(int i = start; i < 9; i++){
            out.add(nums[i]);
            helper(nums,target - nums[i], i+1,out,res,k);
            out.remove(out.size()-1);
        }
            
            
        }



        
    }
    
    
}