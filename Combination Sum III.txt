public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        int[] nums = {1,2,3,4,5,6,7,8,9};
        
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> out = new ArrayList<Integer>();
        
        
        helper(res,out,n,k,0,nums);
        
        
        return res;
        
    }
    
    public void helper(List<List<Integer>> res, List<Integer> out, int target, int k , int start, int[] nums){
        if(target == 0 && out.size() == k){
            res.add(new ArrayList<Integer>(out));
            return;
        }else if(target < 0 || (target== 0 && out.size() != k)){
            return;
        }else{
            for(int i = start; i < nums.length && target >= nums[i] ;i++){
                out.add(nums[i]);
                helper(res,out,target-nums[i],k,i+1,nums);
                out.remove(out.size()-1);
            }
        }
    }
    
    
    
}


