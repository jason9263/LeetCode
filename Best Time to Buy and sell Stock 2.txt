class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        int sizep = prices.size();
        
        int profit = 0;
        
        if(sizep == 0 || sizep == 1){
            profit = 0;
            return profit;
        }
        
        else {
            
            int indexfirst = 1;
            int indexsecond = 0;
            
            
            while(indexfirst < sizep){
                while(indexfirst < sizep && prices[indexfirst] > prices[indexfirst-1] ){
                    profit = profit + prices[indexfirst] - prices[indexsecond];
                    indexsecond = indexfirst;
                    indexfirst++;
                    
                }
                
                while(indexfirst < sizep  && prices[indexfirst] <= prices[indexfirst-1] ){
                    indexsecond = indexfirst;
                    indexfirst++;
                }
                
            }
            
            return profit;
            
        }
        
    }
};

////////////////////////////////////////////////////////////////////////////////
///class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        //find all the ascending sequence
        int lens = prices.size();
        
        int sum = 0;
        int res = 0;
        int left = 0;
        
        for(int i = 1; i < lens; i++ ){
            sum = 0;
          while(prices[i] > prices[i-1] && i < lens){
              sum = sum + prices[i] - prices[i-1];
              i++;
          }
            res = res + sum;
            
        }
        
        //
        return res;
    }
};