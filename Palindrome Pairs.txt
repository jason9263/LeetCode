public class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        
        HashMap<String,Integer> map = new HashMap<>();
        int len = words.length;
        
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        
        if(words == null || words.length < 2){
            return res;
        }
        
        for(int i = 0; i < len; i++){
            map.put(words[i],i);
        }
        
        for(int i = 0; i < len; i++){
            String tmps = words[i];
            for(int j = 0; j <= tmps.length(); j++){
                String s1 = tmps.substring(0,j);
                String s2 = tmps.substring(j);
                
                if(helper(s1)){
                    String res2 = new StringBuilder(s2).reverse().toString();
                    
                    if(map.containsKey(res2)  && map.get(res2) != i){
                        int pos = map.get(res2);
                        List<Integer> tmpres = new ArrayList<Integer>();
                        tmpres.add(pos);
                        tmpres.add(i);
                        
                        res.add(tmpres);
                    }
                    
                }
                
                if(helper(s2)){
                    String res1 = new StringBuilder(s1).reverse().toString();
                    
                    if(map.containsKey(res1) && map.get(res1) != i && s2.length() != 0){
                        int pos = map.get(res1);
                        List<Integer> tmpres = new ArrayList<Integer>();
                        
                        tmpres.add(i);
                        tmpres.add(pos);
                        res.add(tmpres);
                    }
                }
                
            }
            
        }
            return res; 
    }
    
    public boolean helper(String tmp){
        int left = 0;
        int right = tmp.length()-1;
        
        while(left < right){
            
            if(tmp.charAt(left) == tmp.charAt(right)){
                left++;
                right--; 
            }else{
                return false;
            }
        }
        return true;
    }
    
    
}