/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
     
     List<Interval> res = new ArrayList<Interval>();
     
     if(intervals == null || intervals.size() <= 0){
         res.add(newInterval);
         return res;
     }
     
     intervals.add(newInterval);
     
     Collections.sort(intervals,new IntervalComparator());
     
     Interval pre = new Interval();
     pre = intervals.get(0);
     
     for(int i = 1; i < intervals.size(); i++){
         Interval cur  = intervals.get(i);
         
         if(pre.end >= cur.start){
             pre.end = Math.max(pre.end, cur.end);
         }else{
             res.add(pre);
             pre = cur;
         }
         
     }
      
      res.add(pre);
      return res;
        
    }
    
    
    private class IntervalComparator implements Comparator<Interval>{
        public int compare(Interval a, Interval b){
            return a.start - b.start;
        }
    }
}