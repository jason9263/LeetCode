/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        
        int res = 0;
        
        if(intervals == null || intervals.length == 0){
            return res;
        }

        Arrays.sort(intervals,(a,b)-> a.start - b.start);
        
        PriorityQueue<Interval> q = new PriorityQueue<Interval>(intervals.length,(a,b)->a.end - b.end);
        
        q.add(intervals[0]);
        
        for(int i = 1; i < intervals.length; i++){
            
            Interval tmp = q.poll();
            
            if(tmp.end <= intervals[i].start){
                
                tmp.end = intervals[i].end;
                
            }else{
                
                q.add(intervals[i]);
            
            }
            
            q.add(tmp);
            
        }
        
        return q.size();    
    }
}