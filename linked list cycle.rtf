{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for singly-linked list.\
 * class ListNode \{\
 *     int val;\
 *     ListNode next;\
 *     ListNode(int x) \{\
 *         val = x;\
 *         next = null;\
 *     \}\
 * \}\
 */\
public class Solution \{\
    public boolean hasCycle(ListNode head) \{\
        //two pointers\
        ListNode first = head;\
        ListNode twice = head;\
        \
        if(head == null || head.next == null)\{\
            return false;\
        \}\
        \
        \
        while(twice != null && first != null)\{\
            first = first.next;\
            if(twice.next != null)\{\
                twice = twice.next.next;\
                \
                if(twice == null)\{\
                    return false;\
                \}else\{\
                    if(first.val == twice.val)\{\
                        return true;\
                    \}else\{\
                        \
                    \}\
                \}\
                \
                \
            \}else\{\
                return false;\
            \}\
\
        \}\
        \
        \
        return false;\
        \
        \
    \}\
\}}