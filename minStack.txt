public class MinStack {

    /** initialize your data structure here. */
    //classical stack
    public Stack<Integer> cs = new Stack<Integer>();
    //min stack
    public Stack<Integer> ms = new Stack<Integer>();

    public MinStack() {

    }

    public void push(int x) {
        if(cs.isEmpty()){
            cs.push(x);
            ms.push(x);
        }else{
            cs.push(x);
            int temp = ms.peek();
            if(x <= temp){
                ms.push(x);
            }else{

            }
        }
    }

    public void pop() {
        int temp = cs.peek();
        int tempm = ms.peek();

        if(temp == tempm){
            cs.pop();
            ms.pop();
        }else{
            cs.pop();
        }
    }

    public int top() {
        return cs.peek();
    }

    public int getMin() {
        return ms.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
class MinStack {
    
    private Stack<Integer> s1;
    private Stack<Integer> s2;
    
    /** initialize your data structure here. */
    public MinStack() {
        s1 = new Stack<Integer>();
        s2 = new Stack<Integer>();
        
    }
    
    public void push(int x) {
        if(s2.isEmpty() || s2.peek() >= x){
            s2.push(x);
        }
        s1.push(x);
    }
    
    public void pop() {
        
        //System.out.println(s1.peek() + "   "  + s2.peek());
        int x = s1.pop();
        if(x == s2.peek()){// peek return an object so I can s1.peek() == s2.peek()
            s2.pop();
            System.out.println(s2.size());
        }
        
        
    }
    
    public int top() {
        return s1.peek();
    }
    
    public int getMin() {

        return s2.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */


class MinStack {
    private Stack<Integer> stack;
    private int min = Integer.MAX_VALUE;
    
    /** initialize your data structure here. */
    public MinStack() {
        stack = new Stack<Integer>();
    }
    
    public void push(int x) {
        if(min >= x){
            
            stack.push(min);
            min = x;
        }
        
        stack.push(x);
    }
    
    public void pop() {
        if(stack.pop() == min){
            min = stack.pop();
        }
        
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */