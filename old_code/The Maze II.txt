public class Solution {
     class Point{
        int r ;
        int c;
        int l;
        
        public Point(int r, int c, int l){
            this.r = r;
            this.c = c;
            this.l = l;
        }
        
    }
    
    
    private int m ;
    private int n;

    public int shortestDistance(int[][] maze, int[] start, int[] destination) {
        if(maze == null || maze.length == 0){
            return 0;
        }
        
        m =  maze.length;
        n = maze[0].length;
        int[][] len = new int[m][n];
        
        for(int i = 0; i < m*n ; i++){
            len[i/n][i%n] = Integer.MAX_VALUE;    
        }
        
        PriorityQueue<Point> list = new PriorityQueue<>((o1, o2) -> (o1.l - o2.l));
        
        list.offer(new Point(start[0], start[1] ,0));
        
        int[][] dir = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        
        while(!list.isEmpty()){
            
            Point tmp = list.poll();
            
            if(len[tmp.r][tmp.c] <= tmp.l){
                continue;
            }
            
            len[tmp.r][tmp.c] = tmp.l;
            
            for(int[] tmpdir: dir){
                
                int r = tmp.r;
                int c = tmp.c;
                int l = tmp.l;
                
                while(r >= 0 && r < m && c >= 0 && c < n && maze[r][c] == 0){
                    r += tmpdir[0];
                    c += tmpdir[1];
                    l++;
                }
                
                r -= tmpdir[0];
                c -= tmpdir[1];
                l--;
                
                list.offer(new Point(r,c,l));
            }
        }
        
        return len[destination[0]][destination[1]] == Integer.MAX_VALUE ? -1: len[destination[0]][destination[1]];
        
    }
}