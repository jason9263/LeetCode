public class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        
        List<String>res = new LinkedList<String>();
        
        if(board == null || words == null || words.length == 0 || board.length == 0 ){
            return res;
        }

        int len = words.length;
        Set<String> unit = new HashSet<String>();
        
        for(int i = 0; i < len; i++ ){
            unit.add(words[i]);
        }
        
        
        for(String tmps : unit){
         
            if(exist(board,tmps)){
                res.add(tmps);
            }
        }
        
        return res;
    }
    
    public boolean exist(char[][] board, String word) {
        
        int r = board.length;
        int l = board[0].length;
        
        for(int i = 0; i < r; i++){
            for(int j = 0; j < l; j++){
                if(board[i][j]  == word.charAt(0)){
                    
                    Set<String> set = new HashSet<String>();
                    
                    if(helper(board,word,i,j,set,0)){
                        return true;
                    }            
                }
            }
        }
        
        return false;
        
    }
    

    public boolean helper(char[][] board,String word, int i , int j, Set<String> set, int depth){
        int r = board.length;
        int l = board[0].length;
        
        if(board[i][j] == word.charAt(depth)){
            String tmps = String.valueOf(i)+"#"+String.valueOf(j);
            set.add(tmps);
            
            if(depth+1 == word.length()){
                return true;
            }else{
                
                            
            if(i+1 < r && !set.contains(String.valueOf(i+1)+"#"+String.valueOf(j)) && board[i+1][j] == word.charAt(depth+1)){
                if(helper(board,word,i+1,j,set,depth+1)){
                    return true;
                }
            }
            
            if(i-1 >= 0 && !set.contains(String.valueOf(i-1)+"#"+String.valueOf(j)) && board[i-1][j] == word.charAt(depth+1)){
                            
                if(helper(board,word,i-1,j,set,depth+1)){
                    return true;
                }
            }
            
            if(j+1 < l && !set.contains(String.valueOf(i)+"#"+String.valueOf(j+1)) && board[i][j+1] == word.charAt(depth+1)){
               if(helper(board,word,i,j+1,set,depth+1)){
                   return true;
               } 
            }
            
            if(j-1 >= 0 && !set.contains(String.valueOf(i)+"#"+String.valueOf(j-1)) && board[i][j-1] == word.charAt(depth+1)){
                if(helper(board,word,i,j-1,set,depth+1)){
                    return true;
                } 
            }
            
            set.remove(tmps);
            
            return false;
                
            }
            
        }else{
            return false;
        }

    }
    
    
    
}