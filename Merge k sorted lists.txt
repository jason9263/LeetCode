/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        //corner case
        if(lists == null || lists.length == 0){
            return null;
        }
        
        
        // comparator
        
        PriorityQueue<ListNode> queue = new PriorityQueue<ListNode>(lists.length, new Comparator<ListNode>(){
            public int compare(ListNode n1, ListNode n2){
               if(n1.val < n2.val){
                   return -1;
               }else if(n1.val > n2.val){
                   return 1;
               }else{
                   return 0;
               }
            }
        });
        
        //constructing the priorityqueue
        
        
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        
        for(ListNode tmp:lists){
            if(tmp != null){
                queue.add(tmp);
            }
        }
        
        
        while(!queue.isEmpty()){
            tail.next = queue.poll();
            tail = tail.next;
            
            if(tail.next != null){
                queue.add(tail.next);
            }
            
            
        }
        
        return dummy.next;
        
        
    }
}