public class Solution {
    public String decodeString(String s) {
        Stack<String> stack = new Stack<String>();
        String res = "";
        
        for(int i = 0; i < s.length(); i++){
            char tmpc = s.charAt(i);
            if(tmpc >= '0' && tmpc <= '9'){
                int num = 0;
                
                while(tmpc >= '0' && tmpc <= '9'){
                    num  = num * 10 + tmpc- '0';
                    i++;
                    if(i >= s.length()){
                        break;
                    }
                    tmpc = s.charAt(i);
                }
                i--;
                stack.push(String.valueOf(num));
                
            }else if(tmpc == '['){
                
            }else if(tmpc >= 'a' && tmpc <= 'z'){
                StringBuilder tmps = new StringBuilder();
                while(tmpc >= 'a' && tmpc <= 'z'){
                    tmps.append(tmpc);
                    i++;
                    if(i >= s.length()){
                        break;
                    }
                    tmpc = s.charAt(i);
                }
                i--;
                stack.push(tmps.toString());
            }else if(tmpc == ']'){
                
                if(stack.isEmpty()){
                    return res;
                }else if(stack.size() == 1){
                    res = stack.pop();
                    return res;
                }else{
                    String first = stack.pop();
                    String sec = stack.pop();
                    
                    
                    if(sec.charAt(0) >= '0' && sec.charAt(0) <= '9'){
                        int num = Integer.valueOf(sec);
                        String tmps = "";
                        while(num > 0){
                            tmps = tmps + first;
                            num--;
                        }
                        
                        stack.push(tmps);
                        
                    }else{
                            sec = sec + first;
                        while((!stack.isEmpty() )&&!(stack.peek().charAt(0) >= '0' && stack.peek().charAt(0) <= '9')){
                             sec = stack.pop() + sec;
                             
                        }
                        
                        if(stack.isEmpty()){
                            stack.push(sec);
                        }
                        
                       
                        else if(stack.peek().charAt(0) >= '0' && stack.peek().charAt(0) <= '9' ){
                            int num = Integer.valueOf(stack.pop());
                            String tmps = "";
                            while(num > 0){
                                tmps = tmps + sec;
                                num--;
                            }
                            stack.push(tmps);
                        }

                    }
                }

            }
        }
        
        if(stack.isEmpty()){
            return res;
        }else{
            while(!stack.isEmpty()){
                res = stack.pop() + res;
            }
            return res;
        }

    }
}





public class Solution {
    public String decodeString(String s) {
        Stack<Integer> count = new Stack<Integer>();
        Stack<String> result = new Stack<String>();
        
        int i = 0; 
        result.push("");
        
        while(i < s.length()){
            
            char ch = s.charAt(i);
            
            if(ch >= '0' && ch <= '9'){
                int start = i;
                while(s.charAt(i+1) >= '0' && s.charAt(i+1) <= '9'){
                    i++;
                }
                count.push(Integer.parseInt(s.substring(start, i+1)));
                
            }else if(ch == '['){
                result.push("");
            }else if(ch == ']'){
                
                String str = result.pop();
                int times = count.pop();
                StringBuilder sb = new StringBuilder();
                
                for(int j = 0; j < times; j++){
                    sb.append(str);
                }
                
                result.push(result.pop() + sb.toString());
                
            }else{
                result.push(result.pop()+ch);
            }
            i +=1;
        }
        return result.pop();
    }
}