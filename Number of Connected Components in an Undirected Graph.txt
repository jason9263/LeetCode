public class Solution {
    public int countComponents(int n, int[][] edges) {
        
        //corner case
        
        //sorting the edges
        
        int[] parent = new int[n];
        int count = n;
        for(int i = 0; i < n; i++){
            parent[i] = i;
        }
        
        //union_find
        
        for(int i = 0; i < edges.length; i++){
            int p1 = helper(parent,edges[i][0]);
            int p2 = helper(parent,edges[i][1]);
            
            
            
            if(p1 != p2){
                count--;
                parent[p2] = p1;
            }
            
        }
        
        return count;
        
    }
    
    public int helper(int[] parent, int id){
        
        int idx = id;
        
        while(parent[id] != id){
            parent[id] = parent[parent[id]];
            id = parent[id];
        }

        while(parent[idx] != idx){
            int tmp = parent[idx];
            parent[idx] = id;
            idx = tmp;
        }

        return id;
        
    }
    
}