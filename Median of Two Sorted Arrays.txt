public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1 = nums1.length;
        int len2 = nums2.length;
        
        if(len1 <  len2){
            return findMedianSortedArrays(nums2,nums1);
        }
        
        if(len2 == 0){
            return ((double)nums1[(len1-1)/2] + (double)nums1[len1/2])/2;
        }
        
        
        int low = 0;
        int heigh = len2*2;
        
        
        while(low <= heigh){
            
            int mid2 = low + (heigh -low)/2;
            int mid1 = len1 + len2 - mid2;
            
            double L1 = (mid1 == 0? (double)Integer.MIN_VALUE:(double)nums1[(mid1-1)/2]);
            double L2 = (mid2 == 0? (double)Integer.MIN_VALUE:(double)nums2[(mid2-1)/2]);
            
            double R1 = (mid1 == 2*len1? (double)Integer.MAX_VALUE:(double)nums1[mid1/2]);
            double R2 = (mid2 == 2*len2? (double)Integer.MAX_VALUE:(double)nums2[mid2/2]);
            
            
            if(L1 > R2){
                low = mid2+1;
            }else if(L2 > R1){
                heigh = mid2-1;
            }else{
                return (Math.max(L1,L2) + Math.min(R1,R2))/2;
            }

            
        }
        
        return -1;

    }
}