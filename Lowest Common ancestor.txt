/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    
        if(root == null){
            return null;
        }        
        
        if(p == root || q == root){
            return root;
        }
        
        
        TreeNode leftroot = lowestCommonAncestor(root.left,p,q);
        TreeNode rightroot = lowestCommonAncestor(root.right,p,q);
        
        if(leftroot != null && rightroot != null){
            return root;
        }else if(leftroot != null && rightroot == null){
            return leftroot;
        }else if(rightroot != null && leftroot == null){
            return rightroot;
        }else{
            return null;
        }
    }

}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        return helper(root,p,q);
    }
    
    public TreeNode helper(TreeNode root, TreeNode p , TreeNode q){
        if(root == null || root == p || root == q){
            return root;
        }
        
        TreeNode left = helper(root.left, p, q);
        TreeNode right = helper(root.right, p, q);
        
        if(left != null && right != null){
            return root;
        }
        
        return left == null ? right : left;

    }
    
    
}