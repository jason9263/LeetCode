{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for singly-linked list.\
 * public class ListNode \{\
 *     int val;\
 *     ListNode next;\
 *     ListNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) \{\
        //l1  l2\
        if (l1 == null)\{\
            return l2;\
        \}\
        \
        if(l2 == null)\{\
            return l1;\
        \}\
        \
        //creating the new string \
        ListNode pl1 = l1;\
        ListNode pl2 = l2;\
        ListNode nh = new ListNode(-1);\
        ListNode dh = nh;\
        \
        while(l1 != null && l2 != null)\{\
            if(l1.val <= l2.val)\{\
                nh.next = l1;\
                l1= l1.next;\
            \}else\{\
                nh.next = l2;\
                l2 = l2.next;\
            \}\
            nh = nh.next;\
            \
        \}\
        \
        \
        while(l1 != null)\{\
            nh.next = l1;\
            nh = l1;\
            l1 = l1.next;\
        \}\
        \
        while(l2 != null)\{\
            nh.next = l2;\
            nh = l2;\
            l2 = l2.next;\
        \}\
        \
        return dh.next;\
        \
    \}\
\}}