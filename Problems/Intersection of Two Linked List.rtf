{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for singly-linked list.\
 * public class ListNode \{\
 *     int val;\
 *     ListNode next;\
 *     ListNode(int x) \{\
 *         val = x;\
 *         next = null;\
 *     \}\
 * \}\
 */\
public class Solution \{\
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) \{\
        \
        \
        \
        int lena = helper(headA);\
        int lenb = helper(headB);\
        \
        if(lena == 0 || lenb == 0)\{\
            return null;\
        \}\
        \
        \
        while(lena > lenb)\{\
            headA = headA.next;\
            lena--;\
        \}\
        \
        while(lena < lenb)\{\
            headB = headB.next;\
            lenb--;\
        \}\
        \
        \
        while(headA != headB)\{\
            headA = headA.next;\
            headB = headB.next;\
        \}\
        \
        return headA;\
        \
    \}\
    public int helper(ListNode h)\{\
        int len = 0;\
        \
        if(h == null)\{\
            return 0;\
        \}\
        while(h != null)\{\
            h = h.next;\
            len++;\
        \}\
        return len;\
    \}\
\}}