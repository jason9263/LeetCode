/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    public int depthSum(List<NestedInteger> nestedList) {
        return helper(nestedList,1);
    }

   // private int helper(<NestedInteger> nestedList,int depth){
    private int helper(List<NestedInteger> list, int depth){
        int result = 0;

        for(NestedInteger e: list){
            result += e.isInteger()? e.getInteger()*depth:( helper(e.getList(),depth+1) );
        }

        return result;
    }
}
