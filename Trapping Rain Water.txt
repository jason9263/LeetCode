public class Solution {
    public int trap(int[] height) {
        int res = 0;
        if(height == null || height.length <= 1){
            return res;
        }
        
        int[] dpl = new int[height.length];
        int[] dpr = new int[height.length];
        int len = height.length;
        
        dpl[0] = height[0];
        dpr[len-1] = height[len-1];

        
        
        for(int i = 1; i <len; i++){
            dpl[i] = Math.max(height[i],dpl[i-1]);    
        }
        
    
        
        for(int i = len-2; i >= 0; i--){
            dpr[i] = Math.max(dpr[i+1],height[i]);
        }
        
        
        for(int i = 0; i < len; i++){
            int tmp = Math.min(dpl[i],dpr[i]) - height[i];
            System.out.println(tmp);
            res += (tmp > 0 ? tmp: 0);
        }
        
        
        return res;
        
    }
}




class Solution {
    public int trap(int[] height) {
        int n = height.length;
        
        int[] dpl = new int[n];
        int[] dpr = new int[n];
        
        int mx = 0;
        
        for(int i = 0; i < n; i++){
            dpl[i] = mx;
            mx = Math.max(mx,height[i]);
        }
        
        mx = 0;
        for(int i = n-1; i >= 0; i--){
            dpr[i] = mx;
            mx = Math.max(mx,height[i]);
        }
        
        int res = 0;
        
        for(int i = 0; i < n ; i++){
            int tmp = Math.min(dpr[i],dpl[i]);
            if(tmp > height[i]){
                res += tmp - height[i];
            }
        }
        
        return res;
    }
}


class Solution {
    public int trap(int[] height) {
        int n = height.length;
        
        int[] dpl = new int[n];
        int[] dpr = new int[n];
        
        int mx = 0;
        
        for(int i = 0; i < n; i++){
            dpl[i] = mx;
            mx = Math.max(mx,height[i]);
        }
        
        mx = 0;
        int res = 0;
        for(int i = n-1; i >= 0; i--){
            dpr[i] = mx;
            mx = Math.max(mx,height[i]);
            
            int tmp = Math.min(dpr[i],dpl[i]);
            
            if(tmp > height[i]){
                res += tmp - height[i];
            }
            
        }
        
        
        return res;
    }
}


class Solution {
    public int trap(int[] height) {
        int a = 0;
        int b = height.length -1;
        
        int leftmax = 0;
        int rightmax = 0;
        int res = 0;
        
        while(a <= b){
            leftmax = Math.max(leftmax, height[a]);
            rightmax = Math.max(rightmax,height[b]);
            
            if(leftmax < rightmax){
                res += (leftmax -height[a] );
                a++;
            }else{
                res += (rightmax - height[b]);
                b--;
            }
            
        }
        
        return res;
    }
}