/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public boolean canAttendMeetings(Interval[] intervals) {
        
        if(intervals == null || intervals.length == 0){
            return true;
        }
        
        Arrays.sort(intervals, ( a,b ) -> a.start - b.start );
        
        PriorityQueue<Integer> q = new PriorityQueue<Integer>();
        q.offer(intervals[0].end);
        
        
        for(int i = 1; i < intervals.length; i++){
            
            if(intervals[i].start < q.peek()){
            
                return false;
            
            }else{
                
               q.poll();
            
            }
            
             q.offer(intervals[i].end);
        }
        
        return true;
        
    }
}