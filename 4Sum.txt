class Solution {
public:
vector<vector<int>> fourSum(vector<int>& nums, int target) {

    int sizenums = nums.size();
    vector<vector<int>> result;

    if (sizenums <= 3){
        return result;
    }
    sort(nums.begin(), nums.end());

    if (sizenums == 4){
        if (nums[0] + nums[1] + nums[2] + nums[3] == target){
            vector<int> temp;
            temp.push_back(nums[0]);
            temp.push_back(nums[1]);
            temp.push_back(nums[2]);
            temp.push_back(nums[3]);
            result.push_back(temp);
        }
        else{

        }

        return result;
    }

    int lastindex = sizenums - 3;

    for (int i = 0; i < lastindex; i++){

    

        if ((i - 1) >= 0 && nums[i - 1] == nums[i]){
            continue;
        }

        for (int j = i + 1; j < lastindex + 1; j++){

        

            if ((j - 1) > i && nums[j - 1] == nums[j]){
                continue;
            }

            int left = j + 1;
            int right = sizenums - 1;


            while (left < right){
            


                int tempresult = nums[i] + nums[j] + nums[left] + nums[right];

            

                if (tempresult < target){
                    left++;
                }
                else if (tempresult > target){
                    right--;
                }
                else{

                    while (left + 1 < right && nums[left + 1] == nums[left]){
                        left++;
                    }

                    while (right- 1 > left && nums[right - 1] == nums[right]){
                        right--;
                    }

                    vector<int> temp;
                    temp.push_back(nums[i]);
                    temp.push_back(nums[j]);
                    temp.push_back(nums[left]);
                    temp.push_back(nums[right]);
                    result.push_back(temp);
                    left++;
                    right--;
                }

            }

        }

    }


    return result;

}
};