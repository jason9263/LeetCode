public class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisties ) {
        
        int[] indeg = new int[numCourses];
        
        for(int i = 0; i < numCourses; i++){
            indeg[i] = 0;
        }
        
        for(int i = 0; i < prerequisties.length; i++){
            indeg[prerequisties[i][1]]++;
        }
        
        //
        Queue<Integer> jq = new LinkedList();
        for(int i = 0; i < numCourses;i++){
            if(indeg[i] == 0){
                jq.offer(i);
            }
        }
        
        //
        int cnt = 0;
        
        while(jq.size() > 0){
            int top = jq.poll();
            
            cnt++;
            
            for(int i = 0; i < prerequisties.length; i++){
                
                if(prerequisties[i][0] == top){
                    if(--indeg[prerequisties[i][1]] == 0){
                        jq.offer(prerequisties[i][1]);
                    }
                }
            }
                        
        }
        
        return cnt == numCourses;
        
    }
}




class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
 
        Map<Integer,Integer> degree = new HashMap<Integer,Integer>();

        Map<Integer,Set<Integer>> item = new HashMap<Integer,Set<Integer>>();
        
        for(int[] tmp: prerequisites){

            if(degree.containsKey(tmp[0])){
                degree.put(tmp[0], degree.get(tmp[0]) + 1);
            }else{
                degree.put(tmp[0],1);
            }
            
            if(degree.containsKey(tmp[1])){
                
            }else{
                degree.put(tmp[1],0);
            }
            
            
            
            if(item.containsKey(tmp[1])){
                item.get(tmp[1]).add(tmp[0]);
            }else{
                Set<Integer> set = new HashSet<Integer>();
                set.add(tmp[0]);
                item.put(tmp[1],set);
            }
            
            if(item.containsKey(tmp[0])){
                
            }else{
                Set<Integer> set = new HashSet<Integer>();
                item.put(tmp[0],set);
            }
            
        }
        

        
        Queue<Integer> q = new LinkedList<Integer>();
             
        for(Map.Entry<Integer,Integer> entry : degree.entrySet() ){
 
            if(entry.getValue() == 0){
               
                q.offer(entry.getKey());
            }
        }
        
        int index = 0;
        
        while(!q.isEmpty()){
            int tmp = q.poll();
            index++;
            
            System.out.println(index);
            
           if(item.get(tmp).size() > 0){
                for(int settmp : item.get(tmp)){
                    int cnt = degree.get(settmp);
                    cnt--;
                    if(cnt == 0){
                        q.offer(settmp);
                    }
                    
                    degree.put(settmp, cnt);
                }               
           }

            
        }

        for(Map.Entry<Integer,Integer> deg : degree.entrySet()){
           if(deg.getValue() > 0){
               return false;
           } 
        }
        
        return true;
    }
}