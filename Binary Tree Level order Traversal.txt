{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
    public List<List<Integer>> levelOrder(TreeNode root) \{\
        List<List<Integer>> result = new LinkedList<List<Integer>>();\
        \
        Queue<TreeNode> qt = new LinkedList<TreeNode>();\
        \
        if(root == null)\{\
            return result;\
        \}\
        \
        qt.offer(root);\
\
        int levelcount = 1;\
        \
        while(!qt.isEmpty())\{\
            List<Integer> res = new LinkedList<Integer>();\
        \
            while(levelcount != 0)\{\
                \
            \
                \
                res.add(qt.peek().val);\
                if(qt.peek().left != null)\{\
                    qt.offer(qt.peek().left);\
                \}\
                if(qt.peek().right != null)\{\
                    qt.offer(qt.peek().right);\
                \}\
                \
                System.out.println("Inner : " + qt.size());\
                \
                qt.poll();\
                levelcount--;\
\
            \}\
            \
            levelcount = qt.size();\
            System.out.println("size : " + levelcount);\
            result.add(res);\
            \
        \}\
        \
        return result;\
        \
    \}\
\}}