



public class Solution {
    
    public List<String> wordBreak(String s, List<String> wordDict) {
        return dfs(s, wordDict,new HashMap<String, List<String>>());
    }
    
    public List<String> dfs(String s, List<String> wordDict, HashMap<String, List<String>> map){
        if(map.containsKey(s)){
            return map.get(s);
        }
        
        List<String> res = new LinkedList<String>();
        if(s.length() == 0){
            res.add("");
            return res;
        }
        
        for(String word : wordDict){
            
            if(s.startsWith(word)){
                List<String> sublist = dfs(s.substring(word.length()), wordDict, map);
            
                for(String sub : sublist){
                    res.add(word + (sub.isEmpty() ? "" : " ") + sub);
                }
                
            }
        }
        
        map.put(s, res);
        return res;
    }

}


class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) {
        
        HashMap<String , List<String>> map = new HashMap<String, List<String>>();
        
        return dfs(s,wordDict,map);
    }
    
    public List<String> dfs(String s, List<String> wordDict, HashMap<String, List<String>> map){
        
        if(map.containsKey(s)){
            return map.get(s);
        }
        
        List<String> res = new ArrayList<String>();
        
        if(s.length() == 0){
            res.add("");
            return res;
        }
        
        for(String word : wordDict){
            
            if(s.startsWith(word)){
                
                List<String> list = dfs(s.substring(word.length()), wordDict,map);
                
                for(String tmp : list){
                    res.add(word + ( tmp.isEmpty() ? "" : " ") + tmp);
                }
            }
        }
        
        map.put(s, res);
        return res;
    } 
}