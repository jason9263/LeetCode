class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> out = new ArrayList<>();
        
        Arrays.sort(candidates);
        
        backtrack(res, out, candidates,target, 0);
        
        return res;
    }
    
    public void backtrack(List<List<Integer>> res, List<Integer> out, int[] nums,int remain, int start){
        if(remain < 0){
            return ;
        }
        
        else if(remain == 0){
            res.add(new ArrayList<Integer>(out));
        }else{
            
            for(int i = start; i < nums.length; i++){
                
                if(i > start && nums[i-1] == nums[i]){
                    continue;
                }
                
                
                out.add(nums[i]);
                
                backtrack(res,out,nums,remain- nums[i], i+1);
                
                out.remove(out.size()-1);
            }

        }

    }

}