/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */

//dfs iterate the whole graph
//
public class Solution {
    private HashMap<Integer,UndirectedGraphNode> map = new HashMap<>();
    
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        return clone(node);    
    }
    
    private UndirectedGraphNode clone(UndirectedGraphNode node){
        if(node == null){
            return null;
        }
        
        if(map.containsKey(node.label)){
            return map.get(node.label);
        }
        
        UndirectedGraphNode newnode = new UndirectedGraphNode(node.label);
        map.put(newnode.label, newnode);
        
        for(UndirectedGraphNode tmp : node.neighbors){
            newnode.neighbors.add(clone(tmp));
        }
        
        return newnode;
        
    }
    
    
}