class Solution {
    public int findKthLargest(int[] nums, int k) {
        Arrays.sort(nums);
        
        return nums[nums.length - k];
    }
}




class Solution {
    public int findKthLargest(int[] nums, int k) {

        
        PriorityQueue<Integer> p = new PriorityQueue<Integer>(Collections.reverseOrder());
        
        for(int i = 0; i < nums.length; i++){
            p.offer(nums[i]);
        }
        
        for(int i = 0; i < k-1 ; i++){
            p.remove();
        }
        
        return p.remove();
        
      
    }
}



class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int left = 0, right = nums.size() - 1;
        while (true) {
            int pos = partition(nums, left, right);
            if (pos == k - 1) return nums[pos];
            else if (pos > k - 1) right = pos - 1;
            else left = pos + 1;
        }
    }
    int partition(vector<int>& nums, int left, int right) {
        int pivot = nums[left], l = left + 1, r = right;
        while (l <= r) {
            if (nums[l] < pivot && nums[r] > pivot) {
                swap(nums[l++], nums[r--]);
            }
            if (nums[l] >= pivot) ++l;
            if (nums[r] <= pivot) --r;
        }
        swap(nums[left], nums[r]);
        return r;
    }
};




class Solution {
    public int findKthLargest(int[] nums, int k) {
        int left = 0;
        int right = nums.length-1;
        int ans = 0;
        
        while(true){
            int pos = helper(nums,left, right, k);
            if(pos == k-1){
                ans = nums[pos];
                break;
            }else if(pos > k -1){
                right = pos -1;
            }else {
                left = pos + 1;
            }
        }
        
        return ans;
        
    }
    
    public int helper(int[] nums, int left, int right, int k ){
        int piv = nums[left];
        int lo = left + 1;
        int hi = right;
        
        while(lo <= hi){
            
            if(nums[lo] < piv && nums[hi] > piv){
                swap(nums,lo,hi);
                lo++;
                hi--;
            }
            
            if(nums[lo] >= piv){
                lo++;
            }
            
            if(nums[hi] <= piv){
                hi--;
            }
            
        }
        
        swap(nums, left,hi);
        
        return hi;
    }
    
    
    public void swap(int[] nums, int i , int j){
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
    
    
    
    
}