/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    
    private String spliter = ",";
    private String Null = "X";
    
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        dfs(root,sb);
        return sb.toString();
    }
    
    public void dfs(TreeNode root, StringBuilder sb){
        if(root == null){
            sb.append(Null).append(spliter);
            
            return;
        }else{
            sb.append(root.val).append(spliter);
            
            dfs(root.left,sb);
            dfs(root.right,sb);
        }
    }
    

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        
        Deque<String> list = new LinkedList<>();
        
        list.addAll(Arrays.asList(data.split(spliter)));
        TreeNode root = buildtree(list);
        
        return root;
    }
    
    public TreeNode buildtree( Deque<String> list){
        if(list.peek().equals(Null)){
            TreeNode root = null;
            list.remove();
            return root;
        }else{
            TreeNode root = new TreeNode(Integer.valueOf(list.remove()));

            root.left = buildtree(list);
            root.right = buildtree(list);
            
            return root;
        }
    }

}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));