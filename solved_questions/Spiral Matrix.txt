public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        
        List<Integer> res = new ArrayList<Integer>();
        
        if(matrix == null ||matrix.length == 0 ||  matrix[0].length == 0){
            return res;
        }
        
        int begincol = 0;
        int endcol = matrix[0].length-1;
        
        int beginrow = 0;
        int endrow = matrix.length-1;
        
        while(begincol <= endcol && beginrow <= endrow){
            
            for(int i = begincol; i <= endcol; i++){
                res.add(matrix[beginrow][i]);
            }
            
            beginrow++;
            
            for(int i = beginrow; i <= endrow; i++){
                res.add(matrix[i][endcol]);
            }
            
            endcol--;
            
            if(begincol <= endcol && beginrow <= endrow){
                for(int i = endcol; i >= begincol; i--){
                    res.add(matrix[endrow][i]);
                }                
            }
            endrow--;
            
            
            if(beginrow <= endrow && begincol <= endcol){
                for(int i = endrow; i >= beginrow; i--){
                    res.add(matrix[i][begincol]);
                }
            }
            begincol++;
            
        }

        return res;
    }
}



class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
     
        List<Integer> res = new ArrayList<>();
        
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return res;
        }
        
        int colbegin = 0;
        int colend = matrix[0].length-1;
        
        int rowbegin = 0;
        int rowend = matrix.length-1;
        
        while(colbegin <= colend && rowbegin <= rowend){
            
            for(int i = colbegin; i <= colend; i++){
                res.add(matrix[rowbegin][i]);
            }
            rowbegin++;
            
            for(int i = rowbegin; i <= rowend; i++ ){
                res.add(matrix[i][colend]);
            }
            colend--;
            
            
           
            for(int i = colend; i >= colbegin; i--){
                 if( rowbegin <= rowend){
                    res.add(matrix[rowend][i]);
                 }
            } 
                rowend--;

            for(int i = rowend; i >= rowbegin; i--){
                    if(colbegin <= colend ){
                        res.add(matrix[i][colbegin]);
                    }
                }
                colbegin++;
            }
        
        return res;
        
    }
}