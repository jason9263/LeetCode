public class Main {
    public static void main(String[] args) {
        System.out.println(smallestNumber(new int[] {
            0,
            0,
            1,
            7
        }, "10"));
    }
    public static String result = "";
    public static String smallestNumber(int[] digits, String lowerBound) {
        int[] counts = new int[10];
        for (int digit: digits) {
            counts[digit] += 1;
        }
        int zeros = digits.length - lowerBound.length();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < zeros; i++) {
            sb.append('0');
        }
        String bound = sb.append(lowerBound).toString();
        System.out.println(bound);
        if (dfs(counts, bound, 0, "")) {
            return result;
        }
        return "no valid result";
    }
    private static boolean dfs(int[] counts, String target, int idx, String currentResult) {
        if (idx == target.length()) {
            result = currentResult;
            return true;
        }
        int currDigit = target.charAt(0) - '0';
        for (int i = currDigit; i < 10; i++) {
            if (counts[i] > 0) {
                int candidate = i;
                counts[candidate]--;
                if (candidate > currDigit) {
                    outputResult(currentResult + candidate, counts);
                    return true;
                }
                if (dfs(counts, target, idx + 1, currentResult + candidate)) {
                    return true;
                }
                counts[candidate]++;
            }
        }
        return false;
    }
    private static void outputResult(String current, int[] counts) {
        result = current;
        for (int i = 0; i < 10; i++) {
            if (counts[i] > 0) {
                for (int j = 0; j < counts[i]; j++) {
                    result = result + i;
                }
            }
        }
    }
}