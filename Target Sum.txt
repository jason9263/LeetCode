class Solution {
    
    private int res;
    
    public int findTargetSumWays(int[] nums, int S) {
       
        res = dfs(nums, S, 0, 0);
        return res;
    }
    
    public int dfs(int[] nums, int s, int start, int res){
        if(start >= nums.length){
            if(s == 0){
                res++;        
            }   
            return res;
        }

        res = dfs(nums, s-nums[start], start+1, res);
        res = dfs(nums, s+nums[start], start + 1, res);
        
        return res;
    }
    
}





class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        long sum = 0;
        for(int tmp : nums){
            sum += tmp;
        }
        
        if(sum < S || S < -sum ){
            return 0;
        }
        
        if(((S + sum) % 2) != 0){
            return 0;
        }
        
        return helper(nums, (int)(S + sum)/2);
    }
    
    public int helper(int[] nums, int target){
        
        int[] dp = new int[target+1];
        dp[0] = 1;
        
        for(int tmp : nums){
            for(int i = target; i >= tmp; i--){
                dp[i] += dp[i-tmp];
            }
        }
        return dp[target];
    }

}