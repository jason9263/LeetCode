public class Solution {
    public int shortestWordDistance(String[] words, String word1, String word2) {
        
        jmap = new HashMap<String, List<Integer>>();
        
        if(words == null || words.length == 0){
            return 0;
        }
   
        for(int i = 0; i < words.length; i++){
            
            if(jmap.containsKey(words[i])){
                
                jmap.get(words[i]).add(i);
                
            }else{
                
                List<Integer> jlist = new LinkedList<Integer>();
                jlist.add(i);
                
                jmap.put(words[i], jlist);
            }
        }
        
        return helper( word1, word2);
    }
    
    public int helper(String word1, String word2){
        
        int res = Integer.MAX_VALUE;
        
        if(word2.equals(word1)){
            
            int min = Integer.MAX_VALUE;
            
            List<Integer> list1 = jmap.get(word1);
            if(list1.size() == 1){
                return 0;
            }
            
            for(int i = 1; i < list1.size(); i++){
                min = Math.min(min, Math.abs(list1.get(i) - list1.get(i-1)));
            }
            
            return min;
        }

        List<Integer> list1 = jmap.get(word1);
        List<Integer> list2 = jmap.get(word2);
        
        for(int i = 0; i < list1.size(); i++){
            for(int j = 0; j < list2.size(); j++){
                res = Math.min(res, Math.abs(list1.get(i) - list2.get(j)) );
            }
        }
        
        return res;
        
    }
    
    private HashMap<String , List<Integer>> jmap;
    
}