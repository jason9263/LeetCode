/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder == null || inorder == null || preorder.length != inorder.length){
            return null;
        }
        
        HashMap<Integer, Integer> jmap = new HashMap<Integer, Integer>();
        for(int i = 0; i < inorder.length; i++){
            jmap.put(inorder[i],i);
        }
        
        
        TreeNode res = helper(preorder, 0 , preorder.length-1 , inorder, 0 , inorder.length- 1, jmap);
        
        
        return res;
    }
    
    public TreeNode helper(int[] preorder, int ps ,int pe ,int[] inorder,int is, int ie, HashMap<Integer, Integer> jmap){
        
        if(ps > pe || is > ie){
            return null;
        }
        
        TreeNode root = new TreeNode(preorder[ps]);
        int ri = jmap.get(root.val);
        
        
        
        TreeNode left = helper(preorder,ps+1,ps + ri -is, inorder,is, ri-1,jmap);
        
        TreeNode right = helper(preorder, ps+ri-is+1,pe,inorder,ri+1, ie,jmap);
        
        root.left = left;
        root.right = right;
        
        return root;
        
    }
    
    
    
}