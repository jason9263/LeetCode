public class LFUCache {
    
    public HashMap<Integer,Integer> vals;
    public HashMap<Integer,Integer> cnts;
    public HashMap<Integer,LinkedHashSet<Integer>> lists;
    public int cap = 0;
    public int min = -1;
    
    public LFUCache(int capacity) {
        vals = new HashMap<Integer,Integer>();
        cnts = new HashMap<Integer,Integer>();
        lists = new HashMap<Integer,LinkedHashSet<Integer>>();
        this.cap = capacity;
        lists.put(1, new LinkedHashSet<Integer>());
    }
    
    public int get(int key) {
        if(!vals.containsKey(key)){
            return -1;
        }
        
        //update cnts
        int tmp = cnts.get(key);
        cnts.put(key,tmp+1);
    
        lists.get(tmp).remove(key);

        
        //update min
        
        if(tmp == min && lists.get(tmp).size() == 0){
            min++;
        }
        
        //update lsits       
        if(!lists.containsKey(tmp+1)){
            lists.put(tmp+1,new LinkedHashSet<Integer>());
        }
        

        lists.get(tmp+1).add(key);

        
        return vals.get(key);
    }
    
    public void put(int key, int value) {
        
        if(cap <= 0){
            return;
        }
        
        if(vals.containsKey(key)){
            vals.put(key,value);
            get(key);
            return;
        }
        
        if(vals.size() >= cap){
            
            int minval = lists.get(min).iterator().next();
            lists.get(min).remove(minval);
            cnts.remove(minval);
            vals.remove(minval);
        }
        
        
        
        vals.put(key,value);
        //cnts
        cnts.put(key,1);

        //min
        min = 1;

        lists.get(min).add(key);

        
    }
}

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache obj = new LFUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */