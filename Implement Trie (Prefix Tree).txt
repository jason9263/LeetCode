public class Trie {

    
    class TrieNode{
        TrieNode[] next = new TrieNode[26];
        String word;
        boolean t = false;
    }
    
    public TrieNode root;
    /** Initialize your data structure here. */
    public Trie() {
         root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode tmpr = root;
        for(char c : word.toCharArray()){
            
            int tmp = c -'a';
            
            if(tmpr.next[tmp] == null){
                tmpr.next[tmp] = new TrieNode();
            }
            
            tmpr = tmpr.next[tmp];
            tmpr.t = tmpr.t|false;
        }
        
        tmpr.word = word;
        tmpr.t = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode tmpr = root;
        
        for(char c : word.toCharArray()){
            int tmp = c -'a';
            
            if(tmpr.next[tmp] == null){
                return false;
            }else{
                tmpr = tmpr.next[tmp];
            }
        }
        
        return tmpr.t;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode tmpr = root;
        for(char c : prefix.toCharArray()){
            int tmp = c - 'a';
            if(tmpr.next[tmp] ==  null){
                return false;
            }else{
                tmpr = tmpr.next[tmp];
            }
        }
        
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */