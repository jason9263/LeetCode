/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> boundaryOfBinaryTree(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        
        if(root == null){
            return res;
        }
        
        
        if(root.left != null || root.right != null){
            res.add(root.val);
        }
                
        left(root.left,res);
        //res.add(10000);
        leaves(root,res);
        //res.add(10000);
        right(root.right,res);
        
        return res;
        
    }
    
    public void left(TreeNode root, List<Integer> res){
         if(root == null || (root.left == null && root.right == null)){
             return;
         }else {        
             res.add(root.val);
                          
             if(root.left != null){
                  left(root.left,res);
             }else {
                left(root.right,res);    
             }          
         }
    }
    
    public void leaves(TreeNode root,List<Integer> res){
        if(root == null){
            return;
        }
        
        if(root.left == null && root.right == null){
            res.add(root.val);
           
        }
        
        leaves(root.left,res);
        leaves(root.right,res);
        
    }
    
    
    public void right(TreeNode root,List<Integer> res){
        if(root == null || (root.left == null && root.right == null)){
            return;
        }
        else{
            
            if(root.right != null){
                right(root.right,res);
            }else{
                right(root.left,res);
            }
            
            res.add(root.val);
        }
    }
    
    
    
    
    
    
    
}