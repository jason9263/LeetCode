class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> out = new ArrayList<>();
        
        boolean[] used = new boolean[nums.length];
        Arrays.fill(used,false);
        
        Arrays.sort(nums);
        backtrack(res,out,nums,used);
        return res;
    }
    
    public void backtrack(List<List<Integer>> res, List<Integer> out, int[] nums, boolean[] used){
        if(out.size() == nums.length){
            res.add(new ArrayList<Integer>(out));
        }else{
            
            for(int i = 0; i < nums.length; i++){
                if(used[i] || i > 0 && nums[i-1] == nums[i] && !used[i-1]){
                    continue;
                }
                
                used[i] = true;
                out.add(nums[i]);
                
                backtrack(res,out,nums,used);
                
                used[i] = false;
                out.remove(out.size()-1);
            }
            
        }
    }
    
    
}



public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> out = new ArrayList<Integer>();
        Set<List<Integer>> set = new HashSet<List<Integer>>();
        boolean[] visited = new boolean[nums.length];
        Arrays.fill(visited,false);
        
        helper(set,out,nums,visited,nums.length); 
        
        for(List<Integer> tmp : set){
            res.add(tmp);
        }       
        
        return res;
    }
    
    public void helper(Set<List<Integer>> set, List<Integer> out, int[] nums,boolean[] visited, int len){

        
        if(out.size() == len){
            set.add(new ArrayList<Integer>(out));
            return;
        }else{
            for(int i = 0; i < len; i++){
                if(visited[i] == true){
                    continue;
                }
                
                out.add(nums[i]);
                visited[i] = true;
                
                helper(set,out,nums,visited,len);
                
                out.remove(out.size()-1);
                visited[i] = false;
            }
        }
    }

}