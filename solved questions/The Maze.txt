public class Solution {
    private int m ;
    private int n;
    
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        
        m = maze.length;
        
        if(maze == null || m == 0){
            return false;
        }
        
        
        n = maze[0].length;
        
        boolean[][] visited = new boolean[m][n];
        
        //Arrays.fill(visited,false);
        
        Queue<int[]> q = new LinkedList<int[]>();
        q.add(start);
        visited[start[0]][start[1]] = true;
        
        int[][] dir = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        
        while(!q.isEmpty()){
            int[] cur = q.remove();
            for(int[] tmpdir : dir){
                
                int r = cur[0];
                int c = cur[1];
                
                while(r >= 0 && r < m && c >= 0 && c < n && maze[r][c] == 0){
                    r += tmpdir[0];
                    c += tmpdir[1];
                }
                
                r -= tmpdir[0];
                c -= tmpdir[1];
                
                if(visited[r][c]){
                    continue;
                }
                
                visited[r][c] = true;
                
                if(r == destination[0] && c == destination[1]){
                    return true;
                }
                
                q.add(new int[] {r,c});
            }
        }
        
        return false;
    }
}