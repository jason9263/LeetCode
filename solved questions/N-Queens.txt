class Solution {
    public List<List<String>> solveNQueens(int n) {
        char[][] board = new char[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0 ; j < n ; j++){
                board[i][j] = '.';
            }
        }
        
        List<List<String>> res = new ArrayList<>();
        
        dfs(board, 0 , res);
        
        return res;
    }
    
    private void dfs(char[][] board, int colindex, List<List<String>> res){
        if(colindex == board.length){
            res.add(construct(board));
            return;
        }
        
        for(int i = 0; i < board.length; i++){
            if(valid(board,i, colindex)){
                board[i][colindex] = 'Q';
                dfs(board,colindex+1,res);
                board[i][colindex] = '.';
            }
        }
    }
    
    private boolean valid(char[][] board,int x, int y){
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < y; j++){
                if(board[i][j] == 'Q' && (x-y == i-j || x+y == i+j || x == i)){
                    return false;
                }
            }
        }
        return true;
    }
    
    private List<String> construct(char[][]board){
        List<String> res = new LinkedList<String>();
        for(int i = 0; i < board.length; i++){
            String s = new String(board[i]);
            res.add(s);
        }
        return res;
    }
    
    
}