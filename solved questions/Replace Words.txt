public class Solution {
    public String replaceWords(List<String> dict, String sentence) {
        if(dict == null || dict.size() == 0){
            return sentence;
        }
        
        Set<String> set = new HashSet<>();
        for(String s:dict){
            set.add(s);
        }
        
        StringBuilder sb = new StringBuilder();
        String[] words = sentence.split("\\s+");
        
            for(String word : words){
                String prefix = "";
                for(int i = 1; i <= word.length(); i++){
                    prefix = word.substring(0,i);
                    if(set.contains(prefix)){
                        break;
                    }
                }
                sb.append(" " + prefix);
            }
        return sb.deleteCharAt(0).toString();
        
    }
}



class Solution {
    public String replaceWords(List<String> dict, String sentence) {
        String[] tokens = new sentence.split(" ");
        TrieNode trie = buildTrie(dict);
        return replaceWords(tokens,dict);
    }

    private String replaceWords(String[] tokens, TrieNode root){
        StringBuilder sb = new StringBuilder();
        for(String token : tokens){
            sb.append(getShortestReplacement(token,root));
            sb.append(" ");
        }
        
        return sb.substring(0,sb.length()-1);
    }
    
    private String getShortestReplacement(String token, final TrieNode root){
        TrieNode tmp = root;
        
        StringBuilder sb = new StringBuilder();
        
        for(char c : token.toCharArray()){
            sb.append(c);
            if(tmp.children[c-'a'] != null){
                if(tmp.children[c-'a'].isWord){
                    return sb.toString();
                }
                tmp = tmp.children[c-'a'];
            }else{
                return token;
            }
        }
        
        return token;
    }

    private TrieNode buildTrie(List<String> dict){
        TrieNode root = new TrieNode(' ');
        for(String word :dict){
            TrieNode tmp = root;
            
            for(char c : word.toCharArray()){
                if(tmp.children[c-'a'] == null){
                    tmp.children[c-'a'] = new TrieNode(c);
                }
                tmp = tmp.children[c-'a'];
            }
            tmp.isWord = true;
        }
        
        return root;
    }

    public class TrieNode{
        char val;
        TrieNode[] children;
        boolean isWord;
        
        public TrieNode(){
            this.val = val;
            this.children = new TrieNode[26];
            this.isWord = false;
        }
    }

}



class Solution {
    public String replaceWords(List<String> dict, String sentence) {
        if(dict == null || dict.size() == 0){
            return sentence;
        }
        
        Set<String> set = new HashSet<String>();
        
        for(String tmp : dict){
            set.add(tmp);
        }
        
        StringBuilder sb = new StringBuilder();
        String[] words = sentence.split("\\s+");
        
        for(String word : words){
            String prefix = "";
            
            for(int i = 1; i <= word.length(); i++){
                prefix = word.substring(0,i);
                if(set.contains(prefix)){
                    break;
                }   
            }
            
            sb.append(" " + prefix);
        }
        
        return sb.deleteCharAt(0).toString();
    }
}