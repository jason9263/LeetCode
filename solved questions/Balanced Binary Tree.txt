/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    HashMap<TreeNode, Integer> map = new HashMap<TreeNode,Integer>();
    
    public int depth(TreeNode root){
        
        if(root == null){
            return 0;
        }
        
        if(map.containsKey(root)){
            return map.get(root);
        }
        
        int res = Math.max(depth(root.left), depth(root.right)) + 1;
        map.put(root,res);
        
        return res;  
    }
    
    HashMap<TreeNode, Boolean> bmap = new HashMap<TreeNode,Boolean>();
    
    public boolean isBalanced(TreeNode root) {
        
        if(root == null){
            return true;
        }
    
        if(bmap.containsKey(root)){
            return bmap.get(root);
        }
        
        int left = depth(root.left);
        int right = depth(root.right);
        
        boolean res = Math.abs(left - right) <= 1 && isBalanced(root.left) && isBalanced(root.right);
        
        bmap.put(root,res);
        
        return res;
        
    }
}