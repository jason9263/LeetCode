/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        
        List<Interval> res = new LinkedList<Interval>();
        // null
        if(intervals == null || intervals.size() == 0){
            return res;
        }
        
        
        Collections.sort(intervals, (a,b)-> a.start - b.start);
        
        int start = intervals.get(0).start;
        int end  = intervals.get(0).end;
        // == 
        for(int i = 1; i < intervals.size(); i++){
            if(intervals.get(i).start > end){
                Interval tmp = new Interval(start, end);
                res.add(tmp);
                
                start = intervals.get(i).start;
                end = intervals.get(i).end;
                
            }else{
                end = Math.max(end, intervals.get(i).end);
            }
        }
        
        Interval t = new Interval(start, end);
        res.add(t);
        
        return res;
    }
}