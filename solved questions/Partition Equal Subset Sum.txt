public class Solution {
    public boolean canPartition(int[] nums) {
        int sum = 0;
        
        for(int num:nums){
            sum += num;
        }
        
        if((sum & 1 ) == 1){
            return false;
        }
        
        sum /= 2;
        
        int n = nums.length;
        boolean[] dp = new boolean[sum+1];
        Arrays.fill(dp,false);
        
        dp[0] = true;
        
        for(int num: nums){
            for(int i = sum; i > 0; i--){
                if(i >= num){
                    dp[i] = dp[i] || dp[i-num];
                }
            }
        }
        
        return dp[sum];
        
    }
}


class Solution {
    public boolean canPartition(int[] nums) {
        int sum =0;
        for(int tmp : nums){
            sum += tmp;
        }
        
        if((sum & 1) == 1){
            return false;
        }
        
        
        sum /= 2;
        int len = nums.length;
        
        boolean[][] dp = new boolean[len+1][sum+1];

        
        dp[0][0] = true;
        
        int m = dp.length;
        int n = dp[0].length;
        
        for(int i = 1; i < m; i++){
            dp[i][0] = true; 
        }
        
        for(int i = 1; i < n; i++){
            dp[0][i] = false;
        }
        
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                dp[i][j] = dp[i-1][j];
                
                if(j >= nums[i-1]){
                    dp[i][j] = dp[i][j] || dp[i-1][j - nums[i-1]];
                }
            }
        }
        
        return dp[len][sum];
        
    }
}