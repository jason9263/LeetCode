class Solution {
    public int m ;
    public int n ;
    
    public void solveSudoku(char[][] board) {
        
        if(board == null || board.length == 0){
            return ;
        }
        this.m = board.length;
        this.n = board[0].length;
        
        solve(board);
    }
    
    public boolean solve(char[][] board){

        for(int i = 0; i < m ; i++){
            for(int j = 0; j < n; j++){
                
                if(board[i][j] == '.'){
                    for(char c = '1' ; c <= '9' ; c++){
                        if(isvalid(board,i,j,c)){
                            board[i][j] = c;
                            
                            if(solve(board)){
                                return true;
                            }else{
                                board[i][j] = '.';
                            }
                        }
                    }
                return false;
                } 
            }
        }
        
        return true;
    }
    
    public boolean isvalid(char[][] board, int row, int col, char c){
        for(int i = 0;  i < 9; i++){
            
            if(board[i][col] != '.' && board[i][col] == c){
                return false;
            }   
            
            if(board[row][i] != '.' && board[row][i]  == c){
                return false;
            }
            
            int tmprow = 3 *(row/3) + i/3;
            int tmpcol = 3 *(col/3) + i%3; 
            
            if(board[tmprow][tmpcol] != '.' && board[tmprow][tmpcol] == c){
                return false;
            }
        }
        
        return true;
    } 
}


class Solution {
    public int m;
    public int n;
    
    public void solveSudoku(char[][] board) {
        if(board == null || board.length == 0){
            return;
        }    
        
        this.m = board.length;
        this.n = board[0].length;
        
        dfs(board);
        
    }
    
    public boolean dfs(char[][] board){
        for(int i = 0; i < m ; i++){
            for(int j = 0; j < n ; j++){
             
                if(board[i][j] == '.'){
                    for(char c = '1' ; c <= '9' ; c++){
                        if(isvalid(board,i,j,c)){
                            board[i][j] = c;
                            
                            if(dfs(board)){
                                return true;
                            }else{
                                board[i][j] = '.';
                            }        
                        }
                    }
                    return false;
                }
            }
        }
        
        return true;
    }
    
    public boolean isvalid(char[][] board, int row , int col,char c){
        for(int i = 0; i < 9; i++){
            if(board[i][col] != '.' && board[i][col] == c  ){
                return false;
            }
            
            if(board[row][i] != '.' && board[row][i] == c){
                return false;
            }
            
            int tmprow = 3*(row/3) + i / 3;
            int tmpcol = 3*(col/3) + i %3;
            
            if(board[tmprow][tmpcol] != '.' && board[tmprow][tmpcol] == c){
                return false;
            }
        }
        
        return true;
    }
    
    
    
}