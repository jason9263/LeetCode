public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        
        int res = 0;
        
        int m = obstacleGrid.length;
        if(obstacleGrid == null || m == 0){
            return res;
        }
        
        
        int n = obstacleGrid[0].length;
        

        
        int[][] path = new int[m][n];
        
        boolean sign = false;
        for(int i = 0 ; i < m ; i++){
            if(sign == false && obstacleGrid[i][0] != 1 ){
                path[i][0] = 1;
            }
            else if(obstacleGrid[i][0] == 1){
                sign = true;
                path[i][0] = 0;
            }else {
                path[i][0] = 0;
            }
        }
        
        
        if(n == 1){
            return path[m-1][0];    
        }
        
        
        sign = false;
        
        for(int i = 0; i < n; i++){
            if(sign == false && obstacleGrid[0][i] != 1){
                path[0][i] = 1;
            }else if( obstacleGrid[0][i] == 1){
                sign = true;
                path[0][i] = 0;
            }else{
                path[0][i] = 0;
            }
        }
        
        for(int i = 1 ; i < m ; i++){
            for(int j = 1; j < n; j++){
                if(obstacleGrid[i][j] == 1){
                    path[i][j] = 0;
                }else{
                    
                    path[i][j] = path[i-1][j] + path[i][j-1];
                }
            }
        }
        
        return path[m-1][n-1];
        

        
    }
}