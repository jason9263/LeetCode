/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        
        helper(root,res);
        
        return res;
    }
    
    public void helper(TreeNode root, List<Integer> res){
        if(root == null){
            return;
        }
        
        helper(root.left, res);
        helper(root.right,res);
        res.add(root.val);
        
    }
    
    
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        
        LinkedList<Integer> res = new LinkedList<Integer>();
        
        Stack<TreeNode> js = new Stack<TreeNode>();
        
        
        if(root == null){
            return res;
        }
        
        
        js.push(root);
        
        while(!js.isEmpty()){
            TreeNode tmp = js.peek();
            res.addFirst(tmp.val);
            js.pop();
            
            if(tmp.left != null){
                js.push(tmp.left);
            }
            
            
            if(tmp.right != null){
                js.push(tmp.right);
            }
            
        }
        
        
        
        return res;
    }
}