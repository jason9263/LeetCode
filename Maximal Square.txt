public class Solution {
    public int maximalSquare(char[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return 0;
        }
        
        if(matrix.length == 1){
            for(int i = 0; i < matrix[0].length; i++){
                if(matrix[0][i] == '1'){
                    return 1;
                }
            }
            return 0;
        }
                
        int m = matrix.length;
        int n = matrix[0].length;
        
        int[][] dp = new int[m][n];
         int maxLen = 0;
        
        for(int i = 0; i < m ;i++){
            if(matrix[i][0] == '1'){
                dp[i][0] = 1; 
            }else{
                dp[i][0] = 0;
            }
              maxLen = Math.max(maxLen, dp[i][0]);
        }
        
        for(int i = 0; i < n; i++){
            if(matrix[0][i] == '1'){
                dp[0][i] =1;
            }else{
                dp[0][i] = 0;
            }
              maxLen = Math.max(maxLen, dp[0][i]);
        }
        
       
        
        for(int i = 1; i < m ; i++){
            for(int j = 1; j < n; j++){
                
                if(matrix[i][j] == '0'){
                    dp[i][j] = 0;
                }else{
                   dp[i][j]  = Math.min(dp[i-1][j-1], Math.min(dp[i][j-1],dp[i-1][j])) + 1; 
                }
                
                maxLen = Math.max(maxLen, dp[i][j]);
            }
        }

        return maxLen*maxLen;
    }
}