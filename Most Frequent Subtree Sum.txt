/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public Map<Integer,Integer> sumCount;
    public int maxCount;
    
    public int[] findFrequentTreeSum(TreeNode root) {
        maxCount = 0;
        sumCount = new HashMap<Integer,Integer>();
        
        
        postOrder(root);
        
        List<Integer> res = new ArrayList<Integer>();
        
        for(int key : sumCount.keySet()){
            if(sumCount.get(key) == maxCount){
                res.add(key);
            }
        }
        
        
        
        int[] result = new int[res.size()];
        
        for(int i = 0; i < res.size(); i++){
            result[i] = res.get(i);
        }
        
        return result;
    }
    
    public int postOrder(TreeNode root){
        if(root == null){
            return 0;
        }
        
        int left = postOrder(root.left);
        int right = postOrder(root.right);
        
        int sum = left + right + root.val;
        
        int cnt = sumCount.getOrDefault(sum,0)+1;
        
        sumCount.put(sum,cnt);
        
     
        
        maxCount = Math.max(cnt, maxCount);
        
        return sum;
    }
    
}